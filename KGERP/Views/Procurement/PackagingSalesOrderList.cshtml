@model KGERP.Services.Procurement.VMSalesOrder
@using KGERP.Utility;

@{
    ViewData["Title"] = "Sales Order List";
    Layout = "~/Views/Shared/_Layout.cshtml";

    int sl = 0;
}
<style type="text/css">

    input, select, textarea {
        max-width: 100%;
    }
</style>
<section class="content-header">
    <h1>
        <span>
            Sales Order List
        </span>

    </h1>
    <ol class="breadcrumb">
        <li><a href="~/Home/Index"><i class="fa fa-dashboard"></i>Dashboard</a></li>
        <li class="active">Sales Order</li>
        <li class="active">

            <a class="btn-link btn btn-primary btn-xs" target="_blank" href="~/Procurement/PackagingSalesOrderSlave?companyId=@Model.CompanyFK">Add New Order</a>

        </li>
    </ol>
</section>
@using (Html.BeginForm("PackagingSalesOrderfilter", "Procurement", FormMethod.Post, new { id = "procurementvmSalesOrderListFormId", @class = "formValidator" }))
{
    <section class="content">
        <div class="box">
            <div class="box-danger">
                <div class="box-header">
                    @Html.HiddenFor(model => model.CompanyId, new { id = "CompanyId" })
                    <div class="row">

                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.Label("From Date", htmlAttributes: new { @class = "control-label" })
                                <br />
                                @Html.EditorFor(model => model.StrFromDate, new { htmlAttributes = new { @class = "datepicker", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.StrFromDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.Label("To Date", htmlAttributes: new { @class = "control-label" })
                                <br />
                                @Html.EditorFor(model => model.StrToDate, new { htmlAttributes = new { @class = "datepicker", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.StrToDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-3" style="padding: 0px 2px 0px 8px;">
                            <div class="form-group">
                                <label>&nbsp;</label>
                                <button type="submit" id="btnSave" class="btn btn-primary btn-block">Show</button>
                            </div>
                        </div>
                    </div>
                    <hr />
                    <!-- /.box-header -->
                    <div class="box-body">
                        <div class="table-responsive col-md-12  text-nowrap">
                            <table id="KgErpDataTable" class="table table-striped" width="100%">
                                <thead>
                                    <tr>
                                        <th>SL</th>
                                        <th>Order NO</th>
                                        <th>Order Date</th>
                                        <th>PO NO</th>
                                        <th>Customer</th>
                                        <th>Expected Delivery Date</th>
                                        <th>Payment Method</th>
                                        <th>Status</th>
                                        <th>Submission</th>

                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.DataList)
                                    {
                                        #region Link Title
                                        string statusTitle = "";
                                        if (item.Status == (int)EnumPOStatus.Draft)
                                        { statusTitle = "Make Submit"; }
                                        if (item.Status == (int)EnumPOStatus.Submitted)
                                        { statusTitle = "Undo Submit"; }
                                        #endregion

                                        <tr>
                                            <th>@(++sl)</th>
                                            <td>
                                                <a target="_blank" href="~/Report/PackagingSalesInvoiceReport?companyId=@item.CompanyFK&orderMasterId=@item.OrderMasterId&reportName=PackagingSalesInvoiceReports">@item.OrderNo</a>
                                            </td>

                                            <td>@item.OrderDate.ToString("dd-MM-yyyy")</td>
                                            <td>@item.CustomerPONo</td>

                                            <td>@item.CommonCustomerName</td>
                                            <td>
                                                @if (item.ExpectedDeliveryDate != null)
                                                {<span>@item.ExpectedDeliveryDate.Value.ToString("dd-MM-yyyy")</span>}
                                            </td>
                                            <td>@item.POPaymentMethodName</td>

                                            <td>
                                                @if (item.OrderStatus == "N")
                                                {
                                                    <span class="btn btn-info btn-xs">
                                                        New
                                                    </span>
                                                }
                                                else if (item.OrderStatus == "R")
                                                {
                                                    <span class="btn btn-primary btn-xs">
                                                        Ready to Deliver
                                                    </span>
                                                }
                                                else if (item.OrderStatus == "P")
                                                {
                                                    <span class="btn btn-warning btn-xs">
                                                        Partially Deliver
                                                    </span>
                                                }
                                                else if (item.OrderStatus == "P")
                                                {
                                                    <span class="btn btn-success btn-xs">
                                                        Deliver
                                                    </span>
                                                }
                                            </td>

                                            <td><span class="btn btn-success btn-xs">@item.EnumStatusName</span> </td>
                                            <td>
                                                @if (item.Status == (int)EnumPOStatus.Draft)
                                                {
                                                    <a id="@item.OrderMasterId" onclick=" makeEditble(@item.OrderMasterId);" class="linkPointer" data-toggle="modal" data-target="#editPOModal" title="Edit" data-placement="top"><i class="fa fa-edit" aria-hidden="true"></i></a>
                                                    <a id="@item.OrderMasterId" onclick="makeDeletale(@item.OrderMasterId)" class="linkPointer" data-toggle="modal" data-target="#deleteProcurementPurchaseOrderModal" title="Delete" data-placement="top"><i class="glyphicon glyphicon-trash" aria-hidden="true"></i></a>

                                                }
                                                <a href="~/Procurement/PackagingSalesOrderSlave?companyId=@item.CompanyFK&orderMasterId=@item.OrderMasterId" title="Details"><i class="glyphicon glyphicon-new-window"></i></a>
                                            </td>

                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="box-footer">

                    </div>
                </div>
            </div>
        </div>
    </section>
}

@using (Html.BeginForm("DeleteOrderMastersForPackagingSalesOrder", "Procurement", FormMethod.Post))
{

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="deleteProcurementPurchaseOrderModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b>Delete Sales Order</b></h5>
                </div>
                <div class="modal-body">
                    @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidProcurementPurchaseOrderId" })
                    @Html.HiddenFor(model => model.CompanyFK, new { id = "POdeleteCompanyFK" })

                    @Html.HiddenFor(model => model.ActionId, new { id = "deleteActionId" })

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div style="text-align:center">
                        <h3>Are you sure to Delete this Sales Order?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" onclick="resetProcurementPurchaseOrderForm()" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btnsave" style="width:100%" class="btn btn-primary fa fa-remove">&nbsp; Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@using (Html.BeginForm("SubmitOrderMasters", "Procurement", FormMethod.Post))
{


    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="submitProcurementPurchaseOrderModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b><span class="submitOrDraftText"></span> Purchase Order (<span id="submitOrDraftPOCIDText"></span>)</b></h5>
                </div>
                <div class="modal-body">
                    @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidsubmitProcurementPurchaseOrderId" })
                    @Html.HiddenFor(model => model.CompanyFK, new { id = "POSubmitCompanyFK" })

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div style="text-align:center">
                        <h3>Are you sure to <span class="submitOrDraftText"></span> this Purchase Order?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" onclick="resetProcurementPurchaseOrderForm()" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btnsave" style="width:100%" class="btn btn-primary fa fa-remove">&nbsp;<span class="submitOrDraftText"></span></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@using (Html.BeginForm("UpdatePackagingSalesOrderSlave", "Procurement", FormMethod.Post, new { id = "UpdatePackagingSalesOrderSlaveId" }))
{
    <!-- Modal -->
    <div class="modal fade" id="editPOModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Packaging Sales Order Edit: <span style="font-weight:900" id="orderNoText"></span></h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    @Html.HiddenFor(model => model.CompanyFK, new { id = "modCompanyFK" })

                    @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidOrderMasterId" })

                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group" style="padding:0px">
                                <label>PO No</label>
                                @Html.EditorFor(model => model.CustomerPONo, new { htmlAttributes = new { @autocomplete = "on", @class = "form-control", @name = "Customer Name", @id = "modCustomerPoNo" } })
                                @Html.ValidationMessageFor(model => model.CustomerPONo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label>Order Date</label>
                                @Html.TextBoxFor(x => x.OrderDate, new { @class = "form-control datePicker", id = "txtOrderDate" })
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label>Payment Method</label>
                                @Html.DropDownListFor(model => model.CustomerPaymentMethodEnumFK, Model.POPaymentMethodList as SelectList, "==Payment Method==", new { id = "ddlCustomerPaymentMethodEnumFKK", @class = "form-control ddlReset", style = "width:100%", required = "required" })
                                @Html.ValidationMessageFor(model => model.CustomerPaymentMethodEnumFK, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group" style="padding:0px">
                                <label>Customer</label>
                                @Html.EditorFor(model => model.CommonCustomerName, new { htmlAttributes = new { @autocomplete = "on", @class = "form-control", @name = "Customer Name", @id = "txtCommonCustomerName" } })

                                @Html.HiddenFor(model => model.CustomerId, new { id = "ddlCustomerId" })
                                @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group" style="padding:0px">
                                <label for="message-text" class="col-form-label">Warehouse:</label>
                                @Html.DropDownListFor(model => model.StockInfoId, Model.StockInfoList as SelectList, "==Warehouse==", new { id = "ddStockInfoId", @class = "form-control searchingDropdown", style = "width:100%", required = "required" })
                                @Html.HiddenFor(model => model.StockInfoId, new { id = "hdnStockInfoId" })
                                @Html.ValidationMessageFor(model => model.StockInfoId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label>Exp. Delivery Date</label>
                                @Html.TextBoxFor(x => x.ExpectedDeliveryDate, new { @class = "form-control datePicker", id = "txtDeliveryDate" })
                            </div>
                        </div>
                        

                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group" style="padding:0px">
                                <label for="message-text" class="col-form-label">Final Destination:</label>
                                @Html.TextAreaFor(model => model.FinalDestination, new { @class = "form-control", @id = "txtFinalDestination", rows = 1 })
                                @Html.ValidationMessageFor(model => model.FinalDestination, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="txtDescription" class="col-form-label">Remarks:</label>
                                @Html.TextAreaFor(model => model.Remarks, new { id = "txtDescription", placeholder = "Remarks", @class = "form-control", rows = 1 })
                                @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-8">
                        <button type="button" onclick="resetForm()" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                    <div class="col-md-4">
                        <button type="submit" style="width:100%" id="modaBbtnSave" class="btn btn-primary"><i class="fa fa-floppy-o"></i>&nbsp;Update</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@Scripts.Render("~/bundles/jqueryui")
@Styles.Render("~/Content/cssjqryUi")
@section scripts {

    <script type="text/javascript">
        function resetForm() {
            $('#procurementvmSalesOrderListFormId')[0].reset();
            $('#SOEditActionId').val(1);
        }

        function makeCloseable(rowId, actionId) {
            $('#hidcloseReopenProcurementPurchaseOrderId').val(rowId);
            $('#hidcloseReopenActionId').val(actionId);

            if (actionId == "@((int)ActionEnum.Close)") {
                $('.closeReopenText').text("Close");
            }
            if (actionId == "@((int)ActionEnum.ReOpen)") {
                $('.closeReopenText').text("Reopen");
            }
        }

        function makeSubmitble(rowId) {
            $.ajax({
                    type: "POST",
                    url: "@Url.Action("GetSinglOrderMastersGet", "Procurement")",
                    datatype: "Json",
                data: { orderMasterId: rowId },
                    success: function (data) {
                        console.log(data);
                        $('#submitOrDraftPOCIDText').text(data.OrderNo);

                        if (data.Status == 0) {
                            $('.submitOrDraftText').text("Make Submit");
                        }
                        else {
                            $('.submitOrDraftText').text("Make Draft");

                        }
                    }
             });
            $('#hidsubmitProcurementPurchaseOrderId').val(rowId);
        }

        function makeDeletale(rowId) {
            $('#hidProcurementPurchaseOrderId').val(rowId);
            $('#deleteActionId').val(3);
        }

        function resetProcurementPurchaseOrderForm() {
            $('#procurementPurchaseOrderListFormId')[0].reset();
            $('#ActionId').val(1);
        }

        function DateCustom(orderDate) {
            var dateString = orderDate.substr(6);
            var currentTime = new Date(parseInt(dateString));
            var month = currentTime.getMonth() + 1;
            if (month < 10) {
                month = "0" + month;
            }

            var day = currentTime.getDate();
            var year = currentTime.getFullYear();
            var date = month + "/" + day + "/"+ year ;
            return date;
        }

        function makeEditble(rowId) {
             $.ajax({
                    type: "GET",
                    url: "@Url.Action("GetSinglOrderMastersGet", "Procurement")",
                    datatype: "Json",
                    data: { orderMasterId: rowId },
                    success: function (data) {
                        console.log(data);
        
                        $('#orderNoText').text(data.OrderNoMsg);
                        $('#modCompanyFK').val(data.CompanyFK);
                        $("#hidOrderMasterId").val(rowId);
                        var orderDate = DateCustom(data.OrderDate);
                        $('#txtOrderDate').val(orderDate).change();
                        $('#modCustomerPoNo').val(data.CustomerPONo);
                        $('#ddlCustomerPaymentMethodEnumFKK').val(data.CustomerPaymentMethodEnumFK).change();
                        $('#txtCommonCustomerName').val(data.CommonCustomerName);
        
                        var deliveryDate = DateCustom(data.ExpectedDeliveryDate);
                        $('#txtDeliveryDate').val(deliveryDate).change();

                        $('#ddlCustomerId').val(data.CustomerId);
                        $('#hdnStockInfoId').val(data.StockInfoId);
                        $('#txtFinalDestination').val(data.FinalDestination);
                        $('#txtDescription').val(data.Remarks);
                        $("#ddStockInfoId").val(data.StockInfoId).trigger('change');
        
        
                    }
             });
        }

        $(document).ready(function () {
            //$("#modaBbtnSave").click(() => {
            //    let deliveryDate = $('#txtDeliveryDate').val();
            //    let orderMasterId =$("#hidOrderMasterId").val();
            //    let companyFK =$("#modCompanyFK").val();
            //    let orderDate =$('#txtOrderDate').val();
            //    let customerPoNo =$('#modCustomerPoNo').val();
            //    let customerPaymentMethod =$('#ddlCustomerPaymentMethodEnumFKK').val();
            //    let customerId =$('#ddlCustomerId').val();
            //    let stockInfoId =$('#hdnStockInfoId').val();
            //    let finalDestination =$('#txtFinalDestination').val();
            //    let remarks = $('#txtDescription').val();

            //    let vMSalesOrder = {
            //        OrderMasterId: orderMasterId,
            //        CustomerPONo: customerPoNo,
            //        OrderDate: orderDate,
            //        PaymentMethod: customerPaymentMethod,
            //        CustomerId: customerId,
            //        StockInfoId: stockInfoId,
            //        FinalDestination: finalDestination,
            //        ExpectedDeliveryDate: deliveryDate,
            //        CompanyId: companyFK,
            //        Remarks: remarks,
            //    }
            //    if (vMSalesOrder != null) {
            //        $.ajax({
            //            url: '/Procurement/UpdatePackagingSalesOrderSlave',
            //            type: 'POST',
            //            contentType: 'application/json; charset=utf-8',
            //            data: JSON.stringify(vMSalesOrder),
            //            success: function (response) {
                           
            //            },
            //            error: function (xhr, status, error) {
            //                console.error('Error:', error);
            //                alert('There was an error while saving the data. Please try again.');
            //            }
            //        });
            //    }
                
            //    console.log(vMSalesOrder);
            //    $('#editPOModal').modal('hide');
            //})


            $("#txtCommonCustomerName").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "@Url.Action("GetAutoCompleteSCustomer", "Procurement")",
                        data: { prefix: request.term, companyId: "@Model.CompanyFK" },
                        dataType: "json",
                        type: "get",
                        cache: true,
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {},
                        failure: function (response) {}
                    });
                },
                select: function (e, i) {
                    $("#ddlCustomerId").val(i.item.val);
                },
                minLength: 1,
                cache: true,
                appendTo: "#editPOModal .modal-body"  // Append to the modal's body
            }).focus(function () {
                $(this).autocomplete("search");
            });
        })
    </script>
}

