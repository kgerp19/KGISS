@using KG.Core.Services

@{
    ViewData["Title"] = "Project's";
    Layout = "~/Views/Shared/_Layout.cshtml";


}
@model KGERP.Service.Configuration.VMCommonProductCategory
<style type="text/css">

    input, select, textarea {
        max-width: 100%;
    }
</style>
<section class="content-header">
    <h1>
        Project's
    </h1>
    <ol class="breadcrumb">
        <li><a href="~/Home/Index"><i class="fa fa-dashboard"></i>Dashboard</a></li>
        <li class="active">Project's</li>
    </ol>
</section>
@using (Html.BeginForm("ProductCategoryProject", "Configuration", FormMethod.Post, new { id = "commonFinishProductCategoryFormId", @class = "formValidator", onreset = "resetDDL();" }))
{
    <section class="content">
        <div class="row">
            <div class="col-md-12">
                <div class="col-md-3">
                    <div class="box">
                        @*@Html.AntiForgeryToken()
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="box-danger">
                                <div class="box-header">
                                    <h4>Add Project</h4>
                                </div>

                                <div class="box-body">
                                    @Html.HiddenFor(model => model.ID, new { id = "productCategoryId" })
                                    @Html.HiddenFor(model => model.ActionId, new { id = "ActionId" })
                                    @Html.HiddenFor(model => model.ProductType, new { id = "ProductType" })
                                    @Html.HiddenFor(model => model.CompanyFK, new { id = "CompanyFK" })

                                    <div class="form-group">
                                        @Html.TextBoxFor(model => model.Name, new { id = "txtProductCategoryName", @class = "form-control input-sm", @placeholder = "Project Name", required = "true" })
                                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="form-group">
                                        @Html.TextBoxFor(model => model.Description, new { id = "txtDescription", @class = "form-control input-sm", @placeholder = "Address" })
                                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group">
                                        @Html.TextBoxFor(model => model.LandSizeInKatha, new { id = "txtLandSize", @class = "form-control input-sm", @placeholder = "Land Size In Katha" })
                                        @Html.ValidationMessageFor(model => model.LandSizeInKatha, "", new { @class = "text-danger" })
                                    </div>


                                    <div class="form-group">
                                        <div class="col-md-5">
                                            <button type="button" onclick="resetForm()" class="btn btn-secondary" data-dismiss="modal">Reset</button>
                                        </div>
                                        <div class="col-md-7">
                                            <button type="submit" id="btnSave" class="btn btn-primary btn-block"><i class='fa fa-edit'></i> Add</button>

                                        </div>

                                    </div>
                                </div>
                                <div class="box-footer">
                                </div>
                            </div>*@
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="box-danger">
                            <div class="box-header">
                                <h4>Add Project</h4>
                            </div>

                            <div class="box-body">
                                @Html.HiddenFor(model => model.ID, new { id = "productCategoryId" })
                                @Html.HiddenFor(model => model.ActionId, new { id = "ActionId" })
                                @Html.HiddenFor(model => model.ProductType, new { id = "ProductType" })
                                @Html.HiddenFor(model => model.CompanyFK, new { id = "CompanyFK" })

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Name, "Project Name")
                                    @Html.TextBoxFor(model => model.Name, new { id = "txtProductCategoryName", @class = "form-control input-sm", @placeholder = "Project Name", required = "true" })
                                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Description, "Description")
                                    @Html.TextBoxFor(model => model.Description, new { id = "txtDescription", @class = "form-control input-sm", @placeholder = "Address" })
                                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.LandSizeInKatha, "Land Size In Katha")
                                    @Html.TextBoxFor(model => model.LandSizeInKatha, new { id = "txtLandSize", @class = "form-control input-sm", @placeholder = "Land Size In Katha" })
                                    @Html.ValidationMessageFor(model => model.LandSizeInKatha, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.NoOfFloors, "Number of Floors")
                                    @Html.TextBoxFor(model => model.NoOfFloors, new { id = "txtNoOfFloors", @class = "form-control input-sm", @placeholder = "Ex: G+9" })
                                    @Html.ValidationMessageFor(model => model.NoOfFloors, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.FlatSizeSpecification, "Flat Size Specification")
                                    @Html.TextBoxFor(model => model.FlatSizeSpecification, new { id = "txtFlatSizeSpecification", @class = "form-control input-sm", @placeholder = "Ex: C=1400, D = 1450" })
                                    @Html.ValidationMessageFor(model => model.FlatSizeSpecification, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.TotalParking, "Total Parking")
                                    @Html.TextBoxFor(model => model.TotalParking, new { id = "txtTotalParking", @class = "form-control input-sm", @placeholder = "Total Parking", type = "number" })
                                    @Html.ValidationMessageFor(model => model.TotalParking, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.HandOverDate, "Hand Over Date")
                                    @Html.TextBoxFor(model => model.HandOverDate, new { id = "txtHandOverDate", @class = "datepicker form-control input-sm", @placeholder = "Hand Over Date", @autocomplete = "off" })
                                    @Html.ValidationMessageFor(model => model.HandOverDate, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.TargetCostPerSqft, "Target Cost Per Sqft")
                                    @Html.TextBoxFor(model => model.TargetCostPerSqft, new { id = "txtTargetCostPerSqft", @class = "form-control input-sm", @placeholder = "Target Cost Per Sqft", type = "number" })
                                    @Html.ValidationMessageFor(model => model.TargetCostPerSqft, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.TotalFlat, "Total Flat")
                                    @Html.TextBoxFor(model => model.TotalFlat, new { id = "txtTotalFlat", @class = "form-control input-sm", @placeholder = "Total Flat", type = "number" })
                                    @Html.ValidationMessageFor(model => model.TotalFlat, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    <div class="col-md-5">
                                        <button type="button" onclick="resetForm()" class="btn btn-secondary" data-dismiss="modal">Reset</button>
                                    </div>
                                    <div class="col-md-7">
                                        <button type="submit" id="btnSave" class="btn btn-primary btn-block">
                                            <i class='fa fa-edit'></i> Add
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="box-footer">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-9">
                    <div class="box">

                        <div class="box-danger">
                            <div class="box-header">
                                <h4>Project List</h4>
                            </div>
                            <div class="box-body">

                                <div class="table-responsive col-md-12">
                                    <table id="KgErpDataTable" style="background-color: #ddd;" class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th>SL</th>
                                                <th>Name</th>
                                                @if (Model.CompanyFK == 7 || Model.CompanyFK == 9)
                                                {
                                                    <th>Project Type</th>

                                                }
                                                <th>Land Size</th>
                                                <th>Address</th>
                                                <th>Action</th>
                                            </tr>
                                        </thead>
                                        @{int sl = 0;
                                        }
                                        <tbody>
                                            @foreach (var item in Model.DataList)
                                            {



                                                <tr>
                                                    <td>@(++sl)</td>
                                                    <td id="tdProductCategoryName_@item.ID">@item.Name</td>
                                                    @if (Model.CompanyFK == 7 || Model.CompanyFK == 9)
                                                    {
                                                        if (item.IsCrm)
                                                        {
                                                            <td>S.C.</td>
                                                        }
                                                        else
                                                        {
                                                            <td>C.C.</td>
                                                        }

                                                    }
                                                    <td><span id="tdLandSize_">@item.LandSizeInKatha</span> Katha</td>
                                                    <td id="tdDescription_@item.ID">@item.Description</td>
                                                    <td>

                                                        @*<a id="@item.ID" onclick="makeEditble(this);" class="linkPointer" title="Edit"><i class="fa fa-pencil-square-o"></i></a>*@
                                                        <a id="@item.ID" onclick="makeEditble(@item.ID);" class="linkPointer" title="Edit"><i class="fa fa-pencil-square-o"></i></a>


                                                        <a id="@item.ID" onclick="makeDeletable(@item.ID);" class="linkPointer" data-toggle="modal" data-target="#productCategoryDeleteModal" title="Delete"
                                                           data-placement="top">
                                                            <i class="glyphicon glyphicon-trash" aria-hidden="true"></i>
                                                        </a>
                                                        @if (Model.CompanyFK == 7)
                                                        {<a href="~/Configuration/ProductSubCategoryBlock?companyId=@item.CompanyFK&categoryId=@item.ID&productType=@Model.ProductType" class="btn btn-success btn-sm">Block's</a>
                                                            <a href="~/Configuration/ProductPlotOrFlat?companyId=@item.CompanyFK&categoryId=@item.ID&productType=@Model.ProductType" class="btn btn-warning btn-sm">Plot's</a>

                                                        }
                                                        else
                                                        {
                                                            <a href="~/Configuration/ProductSubCategoryBlock?companyId=@item.CompanyFK&categoryId=@item.ID&productType=@Model.ProductType" class="btn btn-success btn-sm">Floor's</a>
                                                            <a href="~/Configuration/ProductPlotOrFlat?companyId=@item.CompanyFK&categoryId=@item.ID&productType=@Model.ProductType" class="btn btn-warning btn-sm">Flat's</a>

                                                        }

                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>

                            </div>
                            <div class="box-footer">
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </section>


}


@using (Html.BeginForm("ProductCategoryProject", "Configuration", FormMethod.Post, new { id = "commonFinishProductCategoryDeleteFormId", @class = "formValidator", onreset = "resetDDL();" }))
{
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    @Html.HiddenFor(model => model.ID, new { Value = "", id = "productCategoryIdDelete" })
    @Html.HiddenFor(model => model.ActionId, new { Value = "", id = "ActionIdDelete" })
    @Html.HiddenFor(model => model.CompanyFK, new { Value = "", id = "CompanyFKDelete" })

    <div class="modal fade" id="productCategoryDeleteModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" onclick="resetForm()" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b>Project Delete</b></h5>

                </div>
                <div class="modal-body">
                    <div style="text-align:center">
                        <h3>Are you sure to delete this Project?</h3>
                    </div>

                </div>

                <div class="modal-footer">
                    <button type="button" id="btnClose" onclick="resetForm()" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" id="btnDelete" class="deleteId btn btn-primary"><i class="glyphicon glyphicon-check"></i> Confirm</button>
                </div>
            </div>
        </div>
    </div>
}


@section scripts {
    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/cssjqryUi")
<script type="text/javascript">
        $(document).ready(function () {
            $('.formValidator').bootstrapValidator();
            $('.handOverDate').datepicker({
                dateFormat: "yy-mm-dd",
                changeMonth: true,
                changeYear: true,
                yearRange: "2001:+50",
                onSelect: function (dateText, inst) {
                    debugger
                    $('[name="handOverDate"]').val(dateText).change();
                    /*$('#txtJobOrderDate').val(dateText).change();*/
                }
            });
        });

        //function makeEditble(elem) {
        //    if (elem !== null) {
        //        var rowId = elem.id;
        //        $('#productCategoryId').val(rowId);
        //        $('#ActionId').val(2);
        //        $('#btnSave').html("<i class='fa fa-edit'></i>&nbsp;Update");
        //        $('#txtProductCategoryName').val($('#tdProductCategoryName_' + rowId).text().trim());
        //        $('#txtDescription').val($('#tdDescription_' + rowId).text().trim());
        //        $('#txtProductCategorycode').val($('#tdProductCategoryCode_' + rowId).text().trim());

        //        var landSizeValue = parseInt($('#tdLandSize_' + rowId).text().trim(), 10);
        //        $('#txtLandSize').val(isNaN(landSizeValue) ? '' : landSizeValue);


        //        window.scrollTo({ top: 0, behavior: 'smooth' });

        //    }
        //}
        function makeEditble(id) {
            if (id !== null) {
                $('#productCategoryIdDelete').val(id);
                $('#ActionId').val(2);
                $('#btnSave').html("<i class='fa fa-edit'></i>&nbsp;Update");
                window.scrollTo({ top: 0, behavior: 'smooth' });
                $.ajax({
            url: '@Url.Action("GetProjectDetailsById", "Configuration")',
            type: 'GET',
            data: { id: id },
                    success: function (data) {
                        console.log(data);
                        $('#productCategoryId').val(data.ProductCategoryId);
                        $('#txtProductCategoryName').val(data.Name);
                        $('#txtDescription').val(data.Address);
                        $('#txtLandSize').val(data.LandSizeInKatha);
                        $('#txtNoOfFloors').val(data.NoOfFloors);
                        $('#txtFlatSizeSpecification').val(data.FlatSizeSpecification);
                        $('#txtTotalParking').val(data.TotalParking);
                        $('#txtHandOverDate').val(formatJSONDate(data.HandOverDate));
                        $('#txtTargetCostPerSqft').val(data.TargetCostPerSqft);
                        $('#txtTotalFlat').val(data.TotalFlat);
            },
            error: function (xhr, status, error) {
                alert("Error while fetching data. Please try again.");
            }
        });

            }
        }
        function formatJSONDate(jsonDate) {
            const timestamp = parseInt(jsonDate.replace(/\/Date\((\d+)\)\//, '$1'));
            const date = new Date(timestamp);
            const formattedDate = date.toISOString().slice(0, 10);
            return formattedDate;
        }

        function makeDeletable(id) {
            if (id !== null) {
                $('#productCategoryIdDelete').val(id);
                $('#ActionIdDelete').val(3);
                $('#CompanyFKDelete').val("@Model.CompanyFK");

            }
        }
        function resetForm() {
            $('#commonFinishProductCategoryFormId')[0].reset();
            $('#btnSave').html("<i class='fa fa-edit'></i>&nbsp;Add");

        }

</script>
}





