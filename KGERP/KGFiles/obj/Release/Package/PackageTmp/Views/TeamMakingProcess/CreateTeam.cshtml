@model KGERP.Service.ServiceModel.TeamMakingProcessViewModel
@{
    ViewBag.Title = "Create Team";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .content-header {
        padding: 10px 0.5rem;
    }

        .content-header .breadcrumb {
            background-color: #6aeb6f33;
            line-height: 1.8rem;
            margin-bottom: 0;
            padding: 10px;
        }

    content-header .breadcrumb {
        line-height: 1.5rem;
    }

    .align-items-center {
        -webkit-align-items: center !important;
        -ms-flex-align: center !important;
        align-items: center !important;
    }

    .justify-content-between {
        -webkit-justify-content: space-between !important;
        -ms-flex-pack: justify !important;
        justify-content: space-between !important;
    }

    .d-flex {
        display: -webkit-flex !important;
        display: -ms-flexbox !important;
        display: flex !important;
    }

    .breadcrumb {
        display: -webkit-flex;
        display: -ms-flexbox;
        display: flex;
        -webkit-flex-wrap: wrap;
        -ms-flex-wrap: wrap;
        flex-wrap: wrap;
        padding: 0.75rem 1rem;
        margin-bottom: 1rem;
        list-style: none;
        background-color: #e9ecef;
        border-radius: 0.25rem;
    }

    .card {
        box-shadow: 0 0 1px rgb(0 0 0 / 13%), 0 1px 3px rgb(0 0 0 / 20%);
        margin-bottom: 1rem;
    }

    .card {
        position: relative;
        display: -webkit-flex;
        display: -ms-flexbox;
        display: flex;
        -webkit-flex-direction: column;
        -ms-flex-direction: column;
        flex-direction: column;
        min-width: 0;
        word-wrap: break-word;
        background-color: #fff;
        background-clip: border-box;
        border: 0 solid rgba(0,0,0,.125);
        border-radius: 0.25rem;
    }

    .card-header:first-child {
        border-radius: calc(.25rem - 0) calc(.25rem - 0) 0 0;
    }

    .card-header {
        background-color: transparent;
        border-bottom: 1px solid rgba(0,0,0,.125);
        padding: 0.75rem 1.25rem;
        position: relative;
        border-top-left-radius: 0.25rem;
        border-top-right-radius: 0.25rem;
    }

    .card-header {
        padding: 0.75rem 1.25rem;
        margin-bottom: 0;
        background-color: #3f51b51f;
        border-bottom: 0 solid rgba(0,0,0,.125);
    }

    .card-body {
        -webkit-flex: 1 1 auto;
        -ms-flex: 1 1 auto;
        flex: 1 1 auto;
        min-height: 1px;
        padding: 1.25rem;
    }

    .text-sm .card-title {
        font-size: 1rem;
    }

    .card-title {
        float: left;
        font-size: 2.1rem;
        font-weight: 400;
        margin: 0;
    }

    .card-title {
        margin-bottom: 0.75rem;
    }

    .mt-2 {
        margin-top: 15px
    }

    .mt-3 {
        margin-top: 20px
    }


    .element.style {
        max-width: 100%;
    }

    .form-control:not(select) {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
    }

    .form-control:not(select) {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
    }

    .form-control {
        border-radius: 0;
        box-shadow: none;
        border-color: #d2d6de;
    }


    .ui-datepicker-trigger .fa {
        padding: 10px;
        background: #ff9800;
        color: #fff;
    }

    .ui-datepicker-trigger {
        background: #ff9800;
        border: none;
    }

    .bg-div {
        padding: 0.75rem 1.25rem;
        margin-bottom: 0;
        background-color: #3f51b51f;
        border-bottom: 0 solid rgba(0,0,0,.125);
    }

    .error {
        color: orangered;
    }

    .table > thead > tr > th,
    .table > tbody > tr > th,
    .table > tfoot > tr > th,
    .table > thead > tr > td,
    .table > tbody > tr > td,
    .table > tfoot > tr > td {
        padding: 5px;
        line-height: 1.42857143;
        vertical-align: baseline !important;
        border-top: 1px solid #ddd;
    }
</style>


<div class="content-header">
    <div class="">
        <div class="breadcrumb d-flex justify-content-between align-items-center">

            <b> Create Teams (@Model.CompanyName) </b>

            <div>
                <a href="#"><i class="fa fa-plus"></i>  Teams List</a>
            </div>
        </div>
    </div>
</div>


<div class="card">
    <div class="card-body">
        @using (Html.BeginForm("CreateTeam", "TeamMakingProcess", FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(x => x.CompanyId, new { @id = "CompanyId" })

            <div class="row" style="margin-top:20px">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.Label(" Team Name", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control customStyle", @id = "NameId", @autocomplete = "off", @style = "max-width: 100%;" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.Label("Select Team Leader", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.DropDownListFor(model => model.EmployeeId, new SelectList(Model.Employee, "Value", "Text"), "---Select Team Leader---", new { id = "ddlCommon_EmployeeId", @class = "searchingDropdown  customStyle", @style = "width: 100%;" })
                            @Html.ValidationMessageFor(model => model.EmployeeId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>


            <div style="margin-top:20px">
                <b>   Add Team Member  </b>
                <div style="height:3px;width:100%;background-color:#a7ebaa;margin-bottom:20px"></div>
            </div>

            <div class="row">

                <div class="col-md-6">
                    <div class="form-group mt-2">
                        @Html.Label("Select Member", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.DropDownListFor(model => model.MemberId, new SelectList(Model.Members, "Value", "Text"), "---Select Mewmber---", new { id = "MemberId", @class = "searchingDropdown  customStyle", @style = "width: 100%;" })
                            @Html.ValidationMessageFor(model => model.MemberId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <button style="margin-top:20px" type="button" id="add" onclick="addItemToGrid()" class=" add btn btn-primary pull-left">
                        <i class="glyphicon glyphicon-plus-sign"></i> Add
                    </button>
                </div>
            </div>


            <table class="table table-bordered" style="margin-top:20px">
                <thead>
                    <tr>
                        <th>Sl</th>
                        <th>Name</th>
                        <th>Mobile No</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="itemDetails">
                </tbody>
            </table>


            <br />
            <div class="row">
                <div class="col-md-6 text-left">
                    <input id="submit" type="submit" data-confirm="Are you sure to submit?" value="Submit" class="btn btn-success pull-right" />
                </div>
            </div>

        }
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/cssjqryUi")

    <script type="text/javascript">
        let EmployeeList = new Array();
        function createRowForStock() {

            var isAllValid = true;
            console.log("hh");

            if (!($('#MemberId').val().trim() !== '')) {
                isAllValid = false;
                $('#MemberId').siblings('span.error').css('visibility', 'visible');
            }
            else {
                $('#MemberId').siblings('span.error').css('visibility', 'hidden');
            }
            return isAllValid;
        }

        function addItemToGrid() {
            var id = $('#MemberId').val();
            var res = createRowForStock();
            if (res) {
                $.ajax({
                type: "POST",
                url: "@Url.Action("GetByMebmer", "TeamMakingProcess")",
                datatype: "Json",
                        data: { id: id},
                    success: function (data) {
                        if (data) {
                            var eid = EmployeeList.filter(x => x.EmployeeId == id).length;
                            console.log(eid);
                            if (eid!==0) {
                                alert("Already Exists Employee");
                            } else {
                                var item = {
                                    "EmployeeId": data.Id,
                                    "Name": data.Name,
                                    "MobileNo": data.MobileNo,
                                };
                                EmployeeList.push(item);
                                PopulateTableFromArray();
                            }

                        }

                    }
                });

                //getSelectedItems();
                //PopulateTableFromArray();
            }
            //buttonVisibility();
        }

        function PopulateTableFromArray() {

            $("#itemDetails").empty();
            if (EmployeeList.length > 0) {
                //Customers[3].Amount
                var html = '';
                $.each(EmployeeList, function (key, item) {
                    // console.log(item);
                    html += '<tr id="' + key + '">';
                    html += '<td> ' + (key + 1) + '</td>';
                    html += '<td><input type="hidden" id="' + key + item.EmployeeId + '" name="TeamMember[' + key + '].EmployeeId" value="' + item.EmployeeId + '"/>' + item.Name+'</td>';
                    html += '<td><input type="hidden" id="' + key + item.MobileNo + '"name="TeamMember[' + key + '].MobileNo" value="' + item.MobileNo + '"/>' + item.MobileNo + '</td>';
                    html += '<td> <a onclick="removecell(' + item.EmployeeId + ',' + key + ')" class=" btn-outline-danger btn-flat btn-sm sm" style="font-size:20px;color:red"> <i class="fa fa-trash"></i></a> </td>';
                    html += '</tr>';
                });
                $('#itemDetails').html(html);
            }
        }


        function removecell(id, key) {
            if (confirm("Are you sure to remove this ?")) {
                EmployeeList.splice(EmployeeList.findIndex(x => x.EmployeeId == id), 1);
                $("#" + key).remove();
                PopulateTableFromArray();
            }
        }

    </script>
}
