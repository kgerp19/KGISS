using KGERP.Data.CustomModel;
using KGERP.Data.Models;
using KGERP.Service.ServiceModel;
using KGERP.Service.ServiceModel.Vendor;
using KGERP.Utility;
using System.Collections.Generic;
using System.Runtime.Remoting.Contexts;
using System.Threading.Tasks;

namespace KGERP.Service.Interface
{
    public interface IVendorService
    {
        Task<VendorModel> GetVendors(int companyId, int vendorTypeId);
        List<SelectModel> GetVendorSelectModels(int vendorTyepId);
        List<SelectModel> GetCustomerSelectModel(int companyId, int vendorType);
        VendorModel GetVendor(int customerId);
        List<CustomerReceivableCustomModel> GetCustomerReceivables(int vendorId);
        List<CustomerLedgerCustomModel> GetCustomerLedger(int id);
        object GetCustomerAutoComplete(string prefix, int companyId);
        object GetCustomerAutoCompleteForShortcredit(string prefix, int companyId);
        object GetCustomerByMarketingOfficerId(string prefix, int companyId, long? salePersonId);
        object CustomerAssociatesCustomerId( int customerId);
        object GetClientAutoComplete(string prefix, int companyId);
        object GetSupplierAutoComplete(string prefix, int companyId);
        VendorModel GetVendorByType(int id, int vendorTypeId);
        Task<VendorModel> GetCustomerPayments(int comcompanyId);
        List<VendorModel> GetCustomerPayments(string searchText, int companyId, int customer);

        Task<bool> SaveVendor(int v, VendorModel vendor, string message);
        string GetAutoGeneratedVendorCode(int companyId, int upazilaId, int vendorId);
        VendorModel GetSupplier(int supplierId);
        VendorModel GetVendorPaymentStatus(int customerId);
        List<MonthSelectModel> GetMonthSelectModes();
        List<VendorModel> GetAllCustomers(int vendorTypeId);
        bool BulkSave(List<VendorModel> vendors);
        List<SelectModel> GetCustomerSelectModelsByCompany(int companyId, int customer);
        List<SelectModel> GetCustomerNameSelectModel(int? companyId, int customer);
        bool DeleteVendor(int id);
        List<SelectModel> GetCustomerSelectModels(int companyId, string productType);
        object GetRentCompanyAutoComplete(string prefix, int companyId);

        Task<VendorDeedListVm> GetAllVendorDeed(int companyId,int customerId = 0);
        Task<int> SaveVendorDeed(VendorDeedVm model);
       
        Task<VendorDeedVm> GetVendorDeedById(int vendorDeedId,int customerId = 0);
        Task<bool> RemoveVendorDeed(int vendorDeedId);

        List<SelectModelType> GetZonewiseCustomerSelectModels(int? zoneId, int? subZoneId);

        MethodFeedbackVM InsertVendorAdjustment(VendorAdjustmentVM model);
        MethodFeedbackVM UpdateVendorAdjustment(VendorAdjustmentVM model);
        MethodFeedbackVM UpdateVendorAdjustmentStatus(VendorAdjustmentVM model);
        VendorAdjustmentVM GetVendorAdjustmentList(int companyId);
        VendorAdjustmentVM GetVendorAdjustmentById(long id);


    }
}
