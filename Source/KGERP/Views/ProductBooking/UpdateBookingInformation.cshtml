@model KGERP.Service.ServiceModel.GLDLBookingViewModel
@using KGERP.Utility
@{
    ViewBag.Title = "UpdateBookingInformation";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<style>
    /*Attachment table Css*/
    .alert-warning, .label-warning, .modal-warning .modal-body {
        background-color: #f5c5a926 !important;
        color: #000 !important;
    }

    .alert .close {
        color: #fff;
        opacity: 2.2;
    }

    .approval {
        padding: 10px 10px;
        background: #87bf87;
        border: 1px solid #87bf87;
        /* border-radius: 30px;*/
    }

    .approval-no {
        padding: 10px 10px;
        background: #a8b1a833;
        border: 1px solid #a8b1a833;
        border-radius: 30px;
    }

    .approval-no-re {
        padding: 10px 10px;
        background: #891919;
        border: 1px solid red;
        border-radius: 30px;
        color: #fff;
    }

    button.close {
        -webkit-appearance: none;
        padding: 0;
        cursor: pointer;
        background: #f10f0f8f;
        border: 0;
    }

    .table-wrapper {
        max-width: 100%;
        margin: auto;
        background: #fff;
        padding: 20px;
        box-shadow: 0 1px 1px rgba(0,0,0,.05);
    }

    .table-title {
        padding-bottom: 10px;
        margin: 0 0 10px;
    }

        .table-title h2 {
            margin: 6px 0 0;
            font-size: 22px;
        }

        .table-title .add-new {
            float: right;
            height: 30px;
            font-weight: bold;
            font-size: 12px;
            text-shadow: none;
            min-width: 100px;
            border-radius: 50px;
            line-height: 13px;
        }

            .table-title .add-new i {
                margin-right: 4px;
            }

    /*   table.table {
        table-layout: fixed;
    }*/

    .attachment table.table tr th, table.table tr td {
        border-color: #e9e9e9;
    }

    .attachment table.table th i {
        font-size: 13px;
        margin: 0 5px;
        cursor: pointer;
    }

    .attachment table.table th:last-child {
        width: 100px;
    }

    .attachment table.table td a {
        cursor: pointer;
        display: inline-block;
        margin: 0 5px;
        min-width: 24px;
    }

        .attachment table.table td a.add {
            color: #27C46B;
        }

        .attachment table.table td a.edit {
            color: #FFC107;
        }

        .attachment table.table td a.delete {
            color: #E34724;
        }

    .attachment table.table td i {
        font-size: 19px;
    }

    .attachment table.table td a.add i {
        font-size: 24px;
        margin-right: -1px;
        position: relative;
        top: 3px;
    }

    .attachment table.table .form-control {
        height: 32px;
        line-height: 32px;
        box-shadow: none;
        border-radius: 2px;
    }

        .attachment table.table .form-control.error {
            border-color: #f50000;
        }

    .attachment table.table td .add {
        display: none;
    }

    /*Attachment table Css*/

    .bg-w {
        margin-right: -15px;
        margin-left: -15px;
        background: #b0e9b2;
        padding: 4px 0px;
        margin-bottom: 14px;
        font-weight: 900;
    }

    .modal-header .close {
        margin-top: -18px;
    }

    .hiddenRow {
        padding: 0 !important;
    }

    .table > thead > tr > th,
    .table > tbody > tr > th,
    .table > tfoot > tr > th,
    .table > thead > tr > td,
    .table > tbody > tr > td,
    .table > tfoot > tr > td {
        /* border-top: 1px solid #f4f4f4; */
        border-top: 1px solid #dbdbdb !important;
    }

    .accordion .hj:after {
        content: "+";
        float: right;
    }

    .accordion .card-header.collapsed:after {
        /* symbol for "collapsed" panels */
        content: "-";
    }

    .preview {
        height: 100px;
    }

    .cloud-uplode-btn {
        background: #009688;
        padding: 16px 22px;
        font-size: 20px;
        border-radius: 50px;
        cursor: pointer;
        transition: 0.3s ease-in-out;
        color: #fff;
        border: 1px solid #009688;
    }

        .cloud-uplode-btn:hover {
            background: #fff;
            color: #009688;
        }

    .shadow {
        box-shadow: 0 .5rem 1rem rgba(0,0,0,.15) !important
    }

    hr {
        margin-top: 20px;
        margin-bottom: 20px;
        border: 0;
        border-top: 8px solid #fff !important;
    }

    .alert {
        padding: 10px !important;
    }

    .alert-dismissable .close, .alert-dismissible .close {
        position: relative;
        top: -8px;
        right: -7px;
    }

    .badge-primary {
        color: #fff;
        background-color: #007bff;
    }

    .badge-success {
        color: #fff;
        background-color: #28a745;
    }

    .badge-danger {
        color: #fff;
        background-color: #dc3545;
    }

    .badge-dark {
        color: #fff;
        background-color: #343a40;
    }


    .badge-info {
        color: #fff;
        background-color: #17a2b8;
    }

    .alert-danger1 {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    .alert1 {
        position: relative;
        padding: 0.75rem 1.25rem;
        margin-bottom: 1rem;
        border: 1px solid transparent;
        border-radius: 0.25rem;
    }
</style>

<div class="bg-w">
    <b>General Information </b>
</div>



@using (Html.BeginForm("UpdateBookingInformation", "ProductBooking", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.ClientId, new { @id = "ClientId" })
    @Html.HiddenFor(m => m.CompanyId, new { @id = "CompanyId" })
    @Html.HiddenFor(m => m.CGId, new { @id = "CGId" })
    <section class="content-header">
        <div class="">

            <div class="card">
                <div class="card-body">
                    <div class="tab-content mt-2 p-0">
                        <div id="alertsms"> </div>
                        <div class="row">
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label"> Application Date <b style="color:red"> *</b> </label>
                                    <div style="display:flex">
                                        <input type="text" name="ApplicationDateString" id="txtApplicationDate" value="@Model.ApplicationDateString" class="form-control datepickeronPage" />
                                        @Html.ValidationMessageFor(model => model.ApplicationDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label class="control-label"> Booking Date <b style="color:red"> *</b> </label>
                                    <div style="display:flex">
                                        <input type="text" name="BookingDateString" id="txtBookingDate" value="@Model.BookingDateString" class="form-control datepickeronPage" />
                                        @Html.ValidationMessageFor(model => model.BookingDateString, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-5">
                                <div class="form-group">
                                    <label for="message-text" class="col-form-label">File No:</label>
                                    @Html.EditorFor(model => model.FileNo, new { htmlAttributes = new { @class = "form-control customStyle", @id = "FileNoId", @autocomplete = "off", @style = "max-width: 100%;" } })
                                    @Html.ValidationMessageFor(model => model.FileNo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="row">

                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label">Select Customer: <b style="color:red"> *</b> </label>
                                    @Html.EditorFor(model => model.CustomerGroupName, new { htmlAttributes = new { @class = "form-control", @name = "ClientName", @id = "ClientNameId", @style = "max-width: 100%;" } })
                                    @Html.HiddenFor(x => x.PrimaryClientId, new { @id = "BookingBy", @name = "ClientId" })
                                    @Html.ValidationMessageFor(model => model.ClientName, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="col-md-4">
                                <div class="form-group">
                                    <label class="control-label">Customer Group<b style="color:red"> *</b> </label>
                                    @Html.EditorFor(model => model.CustomerGroupName, new { htmlAttributes = new { @class = "form-control customStyle", @id = "CustomerGroupNameId", @autocomplete = "off", @style = "max-width: 100%;" } })
                                    @Html.ValidationMessageFor(model => model.CustomerGroupName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label class="control-label"> Mobile No<b style="color:red"> </b> </label>
                                    @Html.EditorFor(model => model.PrimaryContactNo, new { htmlAttributes = new { @class = "form-control customStyle", @id = "PrimaryContactNoId", @autocomplete = "off", @style = "max-width: 100%;" } })
                                    @Html.ValidationMessageFor(model => model.PrimaryContactNo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label for="message-text" class="col-form-label">Email:</label>
                                    @Html.EditorFor(model => model.PrimaryEmail, new { htmlAttributes = new { @class = "form-control customStyle", @type = "email", @id = "PrimaryEmailId", @autocomplete = "off", @style = "max-width: 100%;" } })
                                    @Html.ValidationMessageFor(model => model.PrimaryEmail, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label class="control-label">Address<b style="color:red"> </b> </label>
                                    @Html.TextAreaFor(model => model.PrimaryContactAddr, new { id = "PrimaryContactAddrId", @class = "form-control customStyle", @placeholder = "Address" })
                                    @Html.ValidationMessageFor(model => model.PrimaryContactAddr, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label">Sales Person<b style="color:red"> *</b> </label>
                                    @Html.DropDownListFor(model => model.EmployeeId, Model.Employee as SelectList, "---Select Sales Person ---", new { id = "ddlCommon_EmployeeId", @class = "searchingDropdown  customStyle", @style = "width: 100%;" })
                                    @Html.ValidationMessageFor(model => model.EmployeeId, "", new { @class = "text-danger" })
                                </div>

                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    <label class="control-label"> Team Lead <b style="color:red"> *</b> </label>
                                    <div style="display:flex">
                                        @Html.HiddenFor(m => m.TeamLeadId, new { id = "TeamLeadId" })
                                        <input readonly id="TeamLeadName" value="@Model.TeamLeadName" class="form-control" style="width: 100%;" />

                                        @Html.ValidationMessageFor(model => model.TeamLeadId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <button  data-confirm="Are you sure to submit?" value="Submit" style="width:100%" class="btn btn-warning pull-right">Update</button>
                    </div>
                </div>
            </div>
        </div>
    </section>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/cssjqryUi")

<script>
    function rebuildDatePicker() {
        $('.js-date').datepicker({
            dateFormat: 'dd-M-yy',

            changeMonth: true,
            changeYear: true,
            yearRange: "1950:+150"
        });
    }


    $('.datepickeronPage').datepicker({
        dateFormat: 'dd-M-yy',
        showOn: 'both',
        buttonText: "<i class='fa fa-calendar'></i>",
        changeMonth: true,
        changeYear: true,
        yearRange: "1950:+150"
    });
    $(document).ready(function () {

            $("#ClientNameId").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/ProductBooking/CustomerAutoComplete/',
                        //data: "{ 'prefix': '" + request.term + "'}",
                        data: '{"prefix":"' + request.term + '", "companyId":"' +@Model.CompanyId+'"}',
                        dataType: "json",
                        type: "POST",
                        cache: true,
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            alert(response.responseText);
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $("#BookingBy").val(i.item.val);

                 $.ajax({
                 type: "GET",
                  url: "@Url.Action("GetVendorInformation", "ProductBooking")",
                  datatype: "Json",
                     data: { companyId: "@Model.CompanyId", vendorId: i.item.val },
                  success: function (data) {
                      if (data) {
                          console.log("hhhh", data);
                          $("#CustomerGroupNameId").val(data.Name);
                          $("#PrimaryContactNoId").val(data.Phone);
                          $("#PrimaryEmailId").val(data.Email);
                          $("#PrimaryContactAddrId").val(data.Address);
                          $("#ClientId").val(data.VendorId);
                      }
                  }
                });
                  //var vandorId =   $("#ClientId").val();
                    $.ajax({
                        url: '/Vendor/CustomerAssociatesCustomerId/',
                        /*   data: { companyId: "7", prefix: request.term },*/
                        data: "{ 'customerId': '" + i.item.val + "'}",
                        dataType: "json",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        success: function (data2) {
                            console.log("Amar Function" ,data2);

                            if (data2) {
                                $("#Customer").empty();
                                $("#Customer").append("<option value=''>==Select Customer ==</option>");
                                $(data2).each(function (index2, item2) {
                                    $("#Customer").append("<option value='" + item2.val + "'>" + item2.label + "</option>");
                                });
                            }
                        },
                        error: function (response) {
                            alert(response.responseText);
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        }
                    });
                },
                minLength: 1,
                cache: true

            }).focus(function () {
                $(this).autocomplete("search");
            });

        $("#ddlCommon_EmployeeId").change(function () {
                var empId = $("#ddlCommon_EmployeeId").val();
                   $.ajax({
                       url: '@Url.Action("GetLeaderInfo", "TeamMakingProcess")',
                       data: { employeeId: empId, companyId: "@Model.CompanyId" },
                type: "POST",
                datatype: "Json",
                success: function (data) {
                    $('#TeamLeadId').val(data.EmployeeId);
                    $('#TeamLeadName').val(data.EmployeeName);
                },
                error: function (xhr) {
                    //console.log(xhr);
                }
          });

        });

        });
</script>
}