@model KGERP.Service.Implementation.QualityExceptionComplaints.QualityExceptionComplaintDetailVM
@{
    ViewBag.Title = "QualityExceptionComplaint";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string QualityExceptionBtn = Model.QualityExceptionComplaintId > 0 ? "Update" : "Save";
    bool QuaExcCompDetailsIsSubmited = Model.IsSubmitedDetails;
    bool QuaExcCompSubmited = Model.IsSubmitedDetails;
    bool QuaExcComMasterIsSubmited = Model.IsSubmited;
    string ProductionInChargeSectionBtn = Model.QualityException == null ? "Save" : "Update";
    int? QualityExceptionTag = Model.QualityException;
}

<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
<style>
    input, select {
        max-width: 100% !important;
    }
    .container {
        font-family: 'Roboto', sans-serif;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        width: 100% !important;
        padding-bottom: 1%;
    }

    .card-containers {
        display: flex;
        justify-content: space-evenly;
        margin-top: 20px;
    }

    .card-container {
        display: flex;
        justify-content: end;
        margin-top: 20px;
    }

    .card {
        width: 45%;
        text-align: center;
        padding: 20px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

        .card p {
            font-size: 1.5em;
            margin: 0;
        }
</style>

<div class="container-fluid">
    <div class="row">
        <div class="col-6 col-md-6 col-sm-6">
            <h5 class="mt-1 mb-1 text-dark"><i class="fa fa-industry fa-lg" aria-hidden="true"></i> Quality Exception Complaint </h5>
        </div><!-- /.col -->
        <div class="col-6 col-md-6 col-sm-6">
            <ol class="breadcrumb" style="text-align: end;">
                <li><a href="~/Home/Index"><i class="fa fa-dashboard"></i> Dashboard</a></li>
                <li class="active">Quality Exception Complain</li>
            </ol>
        </div><!-- /.col -->
    </div><!-- /.row -->
</div><!-- /.container-fluid -->

@using (Html.BeginForm("QualityExceptionComplaint", "QualityExceptionComplaint", FormMethod.Post))
{
    <div class="container prevent-context-menu">
        @Html.HiddenFor(model => model.OrderDeliverDetailId, new { @id = "hdnOrderDeliverDetailId" })
        @Html.HiddenFor(model => model.QualityExceptionComplaintId, new { @id = "hdnQualityExceptionComplaintId" })
        @Html.HiddenFor(model => model.QualityExceptionComplaintDetailId, new { @id = "hdnQualityExceptionComplaintDetailId" })
        <div class="row" style="margin-top:1%">
            <div class="col-md-3">
                <label class="required">Customer</label>
                <div class="form-group" style="display:flex">
                    @Html.DropDownListFor(m => m.CustomerId, Model.DDLCustomer, "Please select", new { @class = "form-control" })

                </div>
                @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-3">
                <label class="required">Order</label>
                <div class="form-group" style="display:flex">
                    @Html.DropDownListFor(m => m.OrderMasterId, Model.DDLOrder, new { @class = "form-control" })

                </div>
                @Html.ValidationMessageFor(model => model.OrderMasterId, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-3">
                <label class="required">Delivery</label>
                <div class="form-group" style="display:flex">
                    @Html.DropDownListFor(m => m.OrderDeliverId, Model.DDLOrderDelivery, new { @class = "form-control" })

                </div>
                @Html.ValidationMessageFor(model => model.OrderDeliverId, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-3">
                <label class="required">Delivery Detail</label>
                <div class="form-group" style="display:flex">
                    @Html.DropDownListFor(m => m.OrderDeliverDetailsId, Model.DDLOrderDeliveryDetail, new { @class = "form-control" })

                </div>
                @Html.ValidationMessageFor(model => model.OrderDeliverDetailsId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="row" style="margin-top:1%">
            <div class="col-md-3">
                <label>Delivered Weight</label>
                <div class="form-group" style="display:flex">
                    @Html.TextBoxFor(model => model.NetWeight, new { @class = "form-control", @autocomplete = "off", @disabled = "disabled" })
                </div>
            </div>
            <div class="col-md-3">
                <label>Affected Weight</label>
                <div class="form-group" style="display:flex">
                    @Html.TextBoxFor(model => model.DeliveredAffectedWeight, new { @class = "form-control ", @autocomplete = "off", type = "number" })
                </div>
            </div>
            <div class="col-md-3">
                <label>Delivered Quantity</label>
                <div class="form-group" style="display:flex">
                    @Html.TextBoxFor(model => model.DeliveredQty, new { @class = "form-control ", @autocomplete = "off", @disabled = "disabled" })
                </div>
            </div>
            <div class="col-md-3">
                <label>Affected Quantity</label>
                <div class="form-group" style="display:flex">
                    @Html.EditorFor(model => model.DeliveredAffectedQty, new { htmlAttributes = new { @class = "form-control ", @autocomplete = "off", type = "number" } })
                </div>
            </div>
        </div>
        <div class="row table-responsive">

            <h4 style="margin-left:1%"><b>Description of Quality Exception :</b></h4>
            <div class="col-md-12">
                <table class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th colspan="3" style="text-align:end"><i onclick="addQualityExceptionComplaintItem('75')" class="btn btn-warning btn-sm fa fa-plus-square fa-lg" aria-hidden="true"></i>&nbsp;</th>
                        </tr>
                        <tr class="active">
                            <th>Sl</th>
                            <th style="width: 96%;">Description</th>
                            <th style="text-align:center"> <i class="fa fa-check" onclick="DesQuaExceptionCheck()" aria-hidden="true"></i></th>
                        </tr>
                    </thead>
                    <tbody id="tblBodyDQE">
                        @{
                            if (Model.DropDownItemForQualityExceptionList != null)
                            {
                                int sl = 0;
                                for (int i = 0; i < Model.DropDownItemForQualityExceptionList.Count; i++)
                                {
                                    string isChecked = Model.DropDownItemForQualityExceptionList[i].QualityExceptionValue == true ? "checked" : "";
                                    <tr>
                                        <td>@(++sl)</td>
                                        <td class="col-md-4">@Model.DropDownItemForQualityExceptionList[i].Text</td>
                                        <td class="col-md-4" style="text-align:center">
                                            @Html.HiddenFor(m => Model.DropDownItemForQualityExceptionList[i].Value)
                                            @Html.HiddenFor(m => Model.DropDownItemForQualityExceptionList[i].Text)
                                            @Html.CheckBoxFor(m => Model.DropDownItemForQualityExceptionList[i].QualityExceptionValue, new { @class = "checkboxs", style = "text-align: center;" })
                                        </td>
                                    </tr>
                                }
                            }

                        }

                    </tbody>
                </table>
            </div>



        </div>

        <br />
        <div class="row">
            <div class="col-md-12">
                <label>Description of Quality Exception (in Detail)</label>
                <div class="form-group">
                    @Html.TextAreaFor(model => model.DescriptionQualityException, new { @class = "form-control", rows = 3 })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <label>Any Other Remarks </label>
                <div class="form-group">
                    @Html.TextAreaFor(model => model.OtherRemarks, new { @class = "form-control", rows = 3 })
                </div>
            </div>
        </div>

        @if (!QuaExcCompSubmited)
        {
            <div class="row text-center" style="margin-top:2%">
                <div class="card-containers">
                    <div class="card">
                        <div class="card-header">
                            <button type="submit" class="btn btn-warning mb-1" style="width:25%;color:black"><b style="color:white">@QualityExceptionBtn</b></button>
                        </div>
                    </div>
                </div>
                @if (QualityExceptionBtn == "Update")
                {
                    <div class="card-containers">
                        <div class="card">
                            <div class="card-header">
                                <span style="width:25%" onclick="QuaExcCompDetailsSubmited('@Model.QualityExceptionComplaintDetailId')" class="btn btn-danger" data-toggle="modal" data-target="#divSubmiteQEC" data-placement="top"> Submit </span>
                            </div>
                        </div>
                    </div>
                }

            </div>
        }

    </div>
}
@using (Html.BeginForm("QualityExceptionComplaintDetailsSubmit", "QualityExceptionComplaint", FormMethod.Post))
{
    <div class="modal fade" id="divSubmiteQEC" tabindex="-1" role="dialog" aria-labelledby="basicModal" aria-hidden="true">
        @Html.HiddenFor(model => model.QualityExceptionComplaintDetailId, new { @id = "modalQualityExceptionComplaintDetailId" })
        @Html.HiddenFor(model => model.QualityExceptionComplaintId)
        @Html.HiddenFor(model => model.QualityException)
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title" id="myModalLabel">Submit Please</h4>
                </div>
                <div class="modal-body">
                    <div style="text-align:center">
                        <h3>Are You Sure To Submit This? <br />Once you submit it, you can't update it again</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </div>
        </div>
    </div>
}
<br />
@if (QuaExcCompDetailsIsSubmited)
{
    using (Html.BeginForm("ProductionInChargeSubmition", "QualityExceptionComplaint", FormMethod.Post))
    {
        <div id="divFillByProductionManager" class="container" style="margin-left:0%">
            @Html.HiddenFor(model => model.QualityExceptionComplaintDetailId, new { @id = "QualityExceptionComplaintDetailIdForProductionInCharge" })
            @Html.HiddenFor(model => model.QualityExceptionComplaintId, new { @id = "QualityExceptionComplaintIdForProductionInCharge" })
            <div class="row">
                <div class="col-md-12">
                    <h2 class="text-center ">Production In-charge and sent to General Manager</h2><br />

                    <div class="col-sm-4">
                        <div class="form-group">
                            <label>Quality Exception:</label><br>
                            <label class="radio-inline">
                                @Html.RadioButton("QualityException", 1, Model.QualityException == 1) Fault Not Accepted
                            </label>
                            <label class="radio-inline">
                                @Html.RadioButton("QualityException", 2, Model.QualityException == 2) Fault Accepted
                            </label>
                        </div>
                    </div>

                    <!-- Second Column for Textbox -->
                    <div class="col-sm-3">
                        <div class="form-group">
                            <label>Persons Responsible:</label>
                            <div class="form-group" style="display:flex">
                                @Html.DropDownListFor(m => m.PersonsResponsibleForQualityException, Model.DDLEmployee, new { @class = "form-control" })
                            </div>
                            @Html.ValidationMessageFor(model => model.ResponsiblePersons, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div>

            </div>
            <div class="row">
                <div class="col-md-12">
                    <label>Explanation</label>
                    <div class="form-group">
                        @Html.TextAreaFor(model => model.ExceptionExplanation, new { @class = "form-control", rows = 5 })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <label>Steps taken to prevent recurrence </label>
                    <div class="form-group">
                        @Html.TextAreaFor(model => model.StepsTakenToPreventRecurrence, new { @class = "form-control", rows = 5 })

                    </div>
                </div>
            </div>
            @if (!QuaExcComMasterIsSubmited)
            {
                <div class="row text-center" style="margin-top:2%">
                    <div class="card-containers">
                        <div class="card">
                            <div class="card-header">
                                <button type="submit" class="btn btn-warning mb-1" style="width:25%;color:black"><b style="color:white">@ProductionInChargeSectionBtn</b></button>
                            </div>
                        </div>
                    </div>
                    @if (QualityExceptionTag != null)
                    {
                        <div class="card-containers">
                            <div class="card">
                                <div class="card-header">
                                    <span style="width:25%" onclick="QuaExcCompDetailsSubmited('@Model.QualityExceptionComplaintDetailId')" class="btn btn-danger" data-toggle="modal" data-target="#divSubmiteQEC" data-placement="top"> Submit </span>
                                </div>
                            </div>
                        </div>
                    }

                </div>
            }


        </div>
    }
}



<div class="modal fade" id="divModalForException" tabindex="-1" role="dialog" aria-labelledby="basicModal" aria-hidden="true">
    <input hidden id="ExceptionDropDownTypeId" />
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title" id="myModalLabel">Quality Exception Item Add</h4>
            </div>
            <div class="modal-body">
                <input class="form-control form-control-sm" id="ExceptionTxt" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="btnModalSaveData">Save changes</button>
            </div>
        </div>
    </div>
</div>
@section scripts {
    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/cssjqryUi")
    <script type="text/javascript">
        function saveSuccess(data) {
            if (data.result == 1) {
                $.alert.open({
                    type: 'Success',
                    content: data.message,
                    callback: function () {
                        location.reload(true);
                    }
                });
            }
            else {
                $.alert.open("error", data.message);
            }
        }

        let QuaExcCompDetailsSubmited = (QuaExcCompDetailsId) => {
            $('#modalQualityExceptionComplaintDetailId').val(QuaExcCompDetailsId);
        }
        let DesQuaExceptionCheck = () => {
            var anyUnchecked = $('#tblBodyDQE .checkboxs:not(:checked)').length > 0;
            $('#tblBodyDQE .checkboxs').prop('checked', anyUnchecked);
            $('#tblBodyDQE .checkboxs').prop('value', anyUnchecked);

            $('i.fa').toggleClass('fa-check fa-check-square-o');

        }

        let addQualityExceptionComplaintItem = (DropDownTypeId) => {
            $('#ExceptionDropDownTypeId').val(DropDownTypeId);
            $("#divModalForException").modal('toggle');
        }

        $(() => {

            $("#CustomerId").select2();
            $("#OrderMasterId").select2();
            $("#OrderDeliverId").select2();
            $("#OrderDeliverDetailsId").select2();
            $("#PersonsResponsibleForQualityException").select2();

            $('#divSubmiteQEC').on('hidden.bs.modal', function () {
                $('#modalQualityExceptionComplaintDetailId').val(0);
            });
            $("#CustomerId").change(function () {
                debugger
                let customerId = $("#CustomerId").val();
                if (customerId != "") {
                    var resultData = HttpRequest.DropDown("POST", "/QualityExceptionComplaint/GetDDLOrderByCustomer", { VendorId: customerId }, 'OrderMasterId', true);
                    if (resultData.responseJSON.length > 0) {
                        //$("#OrderMasterId").trigger('change');
                    } else {
                        HttpRequest.DropDownDefault("OrderMasterId");
                    }
                    $('#CustomerId-error').html('');

                } else {
                    HttpRequest.DropDownDefault("OrderMasterId");
                }
            });

            $("#OrderMasterId").change(function () {
                let orderMasterId = $("#OrderMasterId").val();
                if (orderMasterId != "") {
                    var resultDataOrderDelivery = HttpRequest.DropDown("POST", "/QualityExceptionComplaint/GetDDLOrderDeliveryByOrderMaster", { OrderMasterId: orderMasterId }, 'OrderDeliverId', true);
                    if (resultDataOrderDelivery.responseJSON.length > 0) {
                        //$("#OrderDeliverId").trigger('change');
                    } else {
                        HttpRequest.DropDownDefault("OrderDeliverId");
                    }
                } else {
                    HttpRequest.DropDownDefault("OrderDeliverId");
                }
                $('#OrderMasterId-error').html('');
            });

            $("#OrderDeliverId").change(function () {
                let orderDeliverId = $("#OrderDeliverId").val();
                if (orderDeliverId != "") {
                    var resultDataOrderDeliveryDetail = HttpRequest.DropDown("POST", "/QualityExceptionComplaint/GetDDLOrderDeliveryDetailsByOrderDelivery", { OrderDeliveryId: orderDeliverId }, 'OrderDeliverDetailsId', true);
                    if (resultDataOrderDeliveryDetail.responseJSON.length > 0) {
                        //$("#OrderDeliverDetailsId").trigger('change');
                    } else {
                        HttpRequest.DropDownDefault("OrderDeliverDetailsId");
                    }
                } else {
                    HttpRequest.DropDownDefault("OrderDeliverDetailsId");
                }
                $('#OrderDeliverId-error').html('');
            });

            $("#OrderDeliverDetailsId").change(function () {
                let orderDeliverDetailsId = $("#OrderDeliverDetailsId").val();
                if (orderDeliverDetailsId != "") {
                    var data = HttpRequest.AjaxData("GET", '/QualityExceptionComplaint/GetDataOfOrderDeliveryDetailsByOrderDeliveryDetailId', { 'OrderDeliveryDetaiId': orderDeliverDetailsId });
                    if (data != null) {
                        $("#GrossWeight").val(data.GrossWeight);
                        $("#DeliveredQty").val(data.DeliveredQty);
                    }
                } else {
                    $.alert.open("worning", "Data Can't Found!");
                }
                $('#OrderDeliverDetailsId-error').html('');
                $('#hdnOrderDeliverDetailId').val(orderDeliverDetailsId);
            });


            $('#btnModalSaveData').click(() => {
                let dropDownTypeId = $('#ExceptionDropDownTypeId').val();
                let exceptionTxt = $('#ExceptionTxt').val();
                if (dropDownTypeId > 0) {
                    HttpRequest.Ajax("POST", '/QualityExceptionComplaint/AddQualityExceptionItem', { "DropDownTypeId": dropDownTypeId, QualityException: exceptionTxt }, saveSuccess, true);
                }
                $('#divModalForException').modal('hide');
            })

            if ("@QualityExceptionBtn" === "Update") {
                $('#hdnQualityExceptionComplaintId').val('@Model.QualityExceptionComplaintId');
                $('#hdnQualityExceptionComplaintDetailId').val('@Model.QualityExceptionComplaintDetailId');
                $("#CustomerId").val('@Model.CustomerId').trigger("change")
                $('#OrderMasterId').val('@Model.OrderMasterId').trigger("change")
                $('#OrderDeliverId').val('@Model.OrderDeliverId').trigger("change")
                $('#OrderDeliverDetailsId').val('@Model.OrderDeliverDetailId').trigger("change")
            }



        })
    </script>
}
