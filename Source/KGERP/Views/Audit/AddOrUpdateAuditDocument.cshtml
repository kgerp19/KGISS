@model KGERP.Service.Implementation.Audit.ViewModels.PreservingAuditDocumentVM
@using KGERP.Utility;
@{
    ViewData["Title"] = "Audit Document";
    Layout = "~/Views/Shared/_Layout.cshtml";
    int i = 1;
    int companyId = Model.UserCompanyId == null ? 1 : Model.CompanyId;
    Model.ActionEnum = Model.Id > 0 ? ActionEnum.Edit : ActionEnum.Add;
}
<style type="text/css">
    input, select, textarea {
        max-width: 100%;
    }
</style>
<section class="content-header" style="margin-bottom:10px">
    <ol class="breadcrumb">
        <li><a href="~/Home/Index"><i class="fa fa-dashboard"></i>Dashboard</a></li>
        <li class="active"><a href="~/Audit/Index?CompanyId=@companyId">Document List</a></li>
    </ol>
</section>
@using (Html.BeginForm("AddOrUpdateAuditDocument", "Audit", FormMethod.Post, new { id = "auditDocumentForm", @class = "formValidator" }))
{
    <section class="content mt-2">
        <div class="box">
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(x => x.Id)
            @Html.HiddenFor(x => x.ActionEnum)
            <div class="box-danger">
                <div class="box-body">
                    <div class="box-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="CompanyId" class="control-label">Select Company</label>
                                    @Html.DropDownListFor(x => x.CompanyId, new SelectList(String.Empty, "value", "text"), new { @class = "form-control companyDrop" })
                                    @Html.ValidationMessageFor(x => x.CompanyId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label" })
                                    @Html.EnumDropDownListFor(model => model.Type, "-- Select Document Type --", htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label" })
                                    @Html.DropDownListFor(x => x.Year, new SelectList(String.Empty, "value", "text"), new { @class = "form-control" })
                                    @Html.ValidationMessageFor(x => x.Year, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Month, htmlAttributes: new { @class = "control-label" })
                                    @Html.DropDownListFor(x => x.Month, new SelectList(String.Empty, "value", "text"), new { @class = "form-control", rows = "1" })
                                    @Html.ValidationMessageFor(x => x.Month, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label" })
                                    @Html.TextAreaFor(model => model.Title, new { @class = "form-control", rows = "1" })
                                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                                </div>


                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Observation, htmlAttributes: new { @class = "control-label" })
                                    @Html.TextAreaFor(model => model.Observation, new { @class = "form-control", rows = "1" })
                                    @Html.ValidationMessageFor(model => model.Observation, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.AuditRecommendationPrimary, htmlAttributes: new { @class = "control-label" })
                                    @Html.TextAreaFor(model => model.AuditRecommendationPrimary, new { @class = "form-control", rows = "1" })
                                    @Html.ValidationMessageFor(model => model.AuditRecommendationPrimary, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.AuditRecommendationFinal, htmlAttributes: new { @class = "control-label" })
                                    @Html.TextAreaFor(model => model.AuditRecommendationFinal, new { @class = "form-control", rows = "1" })
                                    @Html.ValidationMessageFor(model => model.AuditRecommendationFinal, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ProcedureeApplied, htmlAttributes: new { @class = "control-label" })
                                    @Html.TextAreaFor(model => model.ProcedureeApplied, new { @class = "form-control", rows = "1" })
                                    @Html.ValidationMessageFor(model => model.ProcedureeApplied, "", new { @class = "text-danger" })
                                </div>

                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ConcernedFeedback, htmlAttributes: new { @class = "control-label" })
                                    @Html.TextAreaFor(model => model.ConcernedFeedback, new { @class = "form-control", rows = "1" })
                                    @Html.ValidationMessageFor(model => model.ConcernedFeedback, "", new { @class = "text-danger" })
                                </div>

                            </div>
                        </div>
                    </div>
                    <div class="box-footer">
                        <div class="row">
                            <div class="col-md-0 mr-5 pull-right">
                                @*<button type="button" id="resetBtn" onclick="resetauditDocumentForm()" class="btn btn-primary btn-group-m">
                                        <i class='fa fa-refresh'></i> <span>Reset</span>
                                    </button>*@
                                <button type="submit" id="createBtn" class="btn btn-primary btn-group-m">
                                    @if (Model.Id > 0)
                                    {
                                        <i class='fa fa-plus'></i> <span id="action_btn">Update</span>
                                    }
                                    else
                                    {

                                        <i class='fa fa-arrow-right'></i> <span id="action_btn">Next</span>
                                    }
                                </button>
                            </div>
                        </div>
                    </div>
                    @*@if (Model.DataList != null && Model.DataList.Count() > 0)
                        {
                            <h3>Document List</h3>
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">CompanyName</th>
                                        <th scope="col">Type</th>
                                        <th scope="col">Year</th>
                                        <th scope="col">Month</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.DataList)
                                    {
                                    <tr>
                                        <td>@(i++)</td>
                                        <td>@item.CompanyName</td>
                                        <td>@item.Type</td>
                                        <td>@item.Year</td>
                                        <td>@item.MonthName</td>
                                        <td>
                                            <a id="@item.Id" onclick="makeDeletable(@item.Id)" class="linkPointer text-danger" data-toggle="modal" data-target="#deleteModal" title="Delete" data-placement="top"> <i class="glyphicon glyphicon-trash" aria-hidden="true"></i> </a>
                                            <a id="@item.Id" onclick="makeEditable(@item.Id);" class="linkPointer"  title="Edit"> <i class="fa fa-edit" aria-hidden="true"></i> </a>
                                       </td>
                                    </tr>
                                    }
                                </tbody>
                            </table>
                        }*@
                </div>
            </div>
        </div>
    </section>

}

@using (Html.BeginForm("RemoveAuditDocument", "Audit", FormMethod.Post, new { id = "deleteAuditDocumentFormsId", @class = "formValidator" }))
{
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="deleteModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b>Delete  Product Requisition  Item</b></h5>
                </div>
                <div class="modal-body">
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(model => model.Id, new { id = "deletedItemId" })
                    <div style="text-align:center">
                        <h3>Are you sure to Delete this  Document?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" onclick="resetDeleteForm()" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btnsave" style="width:100%" class="btn btn-primary fa fa-remove">&nbsp; Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@section Scripts {
    <script type="text/javascript">

        $(document).ready(function () {
            LoadCompany();
            LoadMonth();
            LoadYear();
            $('.alert').alert();
        });
        function makeEditble(id, productName, quantity, unitPrice) {
            var totalPrice = parseInt(quantity) * parseInt(unitPrice);
            $("#ProductName").val(productName);
            $("#Quantity").val(quantity);
            $("#UnitPrice").val(unitPrice);
            $("#TotalPrice").val(totalPrice);
           // $("#ProductId").val(productId);
            $("#RequisitionItemId").val(id);
            $("#poCreateBtn").text("Update");
        };
        function LoaderFunction(e) {
            var requisitionTypeId = $("#GeneralRequisitionType").val();
            if (requisitionTypeId == 0) {
                return;
            }
            LoadCategory();
            if (requisitionTypeId == @((int)BusinessTypeEnum.Company)) {
                LoadCompany();
            }
            if (requisitionTypeId == @((int)BusinessTypeEnum.Division))
            {
                LoadDepartment();
            }
        }
        function LoadCompany() {
            $.ajax({
                type: "GET",
                url: "/AutoComplete/GetAllCompanyAutoComplete",
                //data: { CompanyId: CompanyId },
                success: function (res) {
                    $("#CompanyId").html("");
                    $('#CompanyId').text("Select Company");
                    var content = '<option>Select Company</option>';
                    $.each(res,
                        function (index, itemData) {
                            content += '<option value=' + itemData.Id + '>' + itemData.Name + '</option>'
                        })

                    $("#CompanyId").append(content)
                }
            })
        }
        function LoadDepartment() {
            $.ajax({
                type: "GET",
                url: "/AutoComplete/GetAllDepartmentAutoComplete",
               // data: { CompanyId: CompanyId },
                success: function (res) {
                    $("#CommonId").html("");
                    $('#CompanyName').text("Select Division");
                    var content = '<option>Select Division</option>';
                    $.each(res,
                        function (index, itemData) {
                            content += '<option value=' + itemData.Id + '>' + itemData.Name + '</option>'
                        })

                    $("#CommonId").append(content)
                }
            })
        }
        function loadPresevingAuditDocument(id) {
            $.ajax({
                type: "GET",
                url: "/Audit/GetAuditDocumentById",
                 data: { id: id },
                success: function (res) {
                    $.each(res,
                        function (index, itemData) {
                            var attr = $("#" + index);
                            if (attr) {
                                attr.val(itemData);
                            }
                        })

              $("#ActionEnum").val("@ActionEnum.Edit.ToString()");
                }
            })
        }

        function LoadMonth() {
            var monthNames = [
                "January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December"
            ];
            var dropdown = $('#Month');
            var currentMonth = new Date().getMonth() + 1;
            dropdown.empty();
            dropdown.append($('<option></option>').text('Select Month'));
            $.each(monthNames, function (index, monthName) {
                var option = $('<option></option>').val(index + 1).text(monthName);
                if (index + 1 === currentMonth) {
                    option.attr('selected', 'selected');
                }
                dropdown.append(option);
            });
        }
        function LoadYear() {
            var currentYear = new Date().getFullYear();
            var startYear = currentYear - 2;
            var endYear = currentYear + 20;
            var dropdown = $('#Year');
            dropdown.empty();
            dropdown.append($('<option></option>').text('Select Year'));
            for (var year = startYear; year <= endYear; year++) {
                var option = $('<option></option>').val(year).text(year);
                if (year === currentYear) {
                    option.attr('selected', 'selected');
                }
                dropdown.append(option);
            }
        }
        function makeDeletable(documentId) {
            $('#deletedItemId').val(documentId);
        }
        function makeEditable(documentId) {
            $("#action_btn").text("Update");
            loadPresevingAuditDocument(documentId);
        }
        function resetDeleteForm() {
            $("#sId").val(null);
            $("#sStatus").val("");
            $("#sUserCompanyId").val(null);
        }
        function resetauditDocumentForm() {
             $("#ActionEnum").val("@ActionEnum.Add.ToString()");
             $("#Id").val(null);
            $("#action_btn").text("Add");
            var entryForm = $("#auditDocumentForm");
            $('#auditDocumentForm :input').val('');
            $('#auditDocumentForm select').prop('selectedIndex', 0);
        }
        $(document).ready(function () {
            $(".companyDrop").select2();
        });


    </script>
}