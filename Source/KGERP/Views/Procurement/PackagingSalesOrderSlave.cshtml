@model KGERP.Services.Procurement.VMSalesOrderSlave
@using KGERP.Utility;


@{ ViewData["Title"] = "Sales Order";
    Layout = "~/Views/Shared/_Layout.cshtml";

    int sl = 0;


    //decimal TotalUnitDiscount = 0;
    double TotalGrossAmount = 0;

    double TotalVAT = 0;


}


<style type="text/css">

    input, select, textarea {
        max-width: 100%;
    }

    .d-class {
        display: none;
    }
</style>

<section class="content-header">
    <h1>
        @if (Model.OrderMasterId > 0)
        {
            <span>
                Sales Order:
                @*<a target="_blank" href="~/Procurement/ProcurementSalesOrderDetailsReport?companyId=@Model.CompanyFK&orderMasterId=@Model.OrderMasterId">@Model.OrderNo</a>*@
                <a class="btn-link linkPointer link-black" target="_blank" href="~/Report/PackagingSalesInvoiceReport?companyId=@Model.CompanyFK&orderMasterId=@Model.OrderMasterId&reportName=PackagingSalesInvoiceReports">@Model.OrderNo</a>

            </span> }
        else
        {
            <span>
                Sales Order Form
            </span>}


    </h1>
    <ol class="breadcrumb">
        <li><a href="~/Home/Index"><i class="fa fa-dashboard"></i>Dashboard</a></li>
        <li class="active">Sales Òrder</li>
        <li class="active">

            <a class="btn-link btn btn-primary btn-xs" target="_blank" href="~/Procurement/PackagingSalesOrderSlave?companyId=@Model.CompanyFK">Add New Order</a>

        </li>
    </ol>
</section>
@using (Html.BeginForm("PackagingSalesOrderSlave", "Procurement", FormMethod.Post, new { id = "procurementSalesOrderSlaveFormId", @class = "formValidator" }))
{
    <section class="content">
        <div class="row">
            <div class="box">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidOrderMasterId" })
                @Html.HiddenFor(model => model.OrderDetailId, new { id = "hidOrderDetailId" })

                @Html.HiddenFor(model => model.ActionId, new { id = "ActionId" })
                @Html.HiddenFor(model => model.CompanyFK, new { id = "CompanyFK" })
                @Html.HiddenFor(model => model.CustomerTypeFk, new { id = "hidCustomerTypeFk" })



                <div class="box-danger">

                    <!-- /.box-header -->
                    <div class="box-body">
                        @if (Model.OrderMasterId > 0)
                        {



                            <div class="col-md-1"> </div>
                            <div class="col-md-10">
                                <table class="table table-sm table-hover table-condensed">
                                    <tr>
                                        <th style="width:18%">
                                            Order No
                                        </th>
                                        <th style="width:2%">:</th>
                                        <td style="width:30%">
                                            <label class="col-form-label">@Model.OrderNo</label>
                                        </td>
                                        <th style="width:18%">Order Date</th>
                                        <th style="width:2%">:</th>
                                        <td style="width:30%">@Model.OrderDate.ToShortDateString()</td>
                                    </tr>


                                    <tr>
                                        <th>Customer PO</th>
                                        <th>:</th>
                                        <td>@Model.CustomerPONo</td>

                                        <th>Customer</th>
                                        <th>:</th>
                                        <td>[@Model.CommonCustomerCode]-@Model.CommonCustomerName</td>

                                    </tr>

                                    <tr>
                                        <th>
                                            Address
                                        </th>
                                        <th>:</th>
                                        <td>@Model.CustomerAddress</td>
                                        <th>Customer Phone</th>
                                        <th>:</th>
                                        <td>@Model.CustomerPhone</td>
                                    </tr>

                                    <tr>

                                        <th>Email</th>
                                        <th>:</th>
                                        <td>@Model.CustomerEmail</td>
                                        <th>Final Destination</th>
                                        <th>:</th>
                                        <td>@Model.FinalDestination</td>
                                    </tr>
                                    <tr>

                                        <th>Payment Method</th>
                                        <th>:</th>
                                        <td>@Model.POPaymentMethodName</td>
                                        <th>Status</th>
                                        <th>:</th>
                                        <td>@Model.EnumStatusName</td>
                                    </tr>
                                    <tr>

                                        <th>Sales Officer Name</th>
                                        <th>:</th>
                                        <td>@Model.OfficerNAme</td>
                                        <th></th>
                                        <th></th>
                                        <td></td>
                                    </tr>
                                    <tr>
                                        <th>Created By</th>
                                        <th>:</th>
                                        <td>@Model.CreatedBy</td>
                                        <th>Created Date</th>
                                        <th>:</th>
                                        <td>@Model.CreatedDate</td>
                                    </tr>


                                </table>
                            </div>
                            <div class="col-md-1"> </div>}
                        <div class="box-body">

                            @if (Model.OrderMasterId == 0)
                            {
                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label>Customer PO NO</label>
                                            @Html.TextBoxFor(model => model.CustomerPONo, new { id = "txtCustomerPONO", @class = "form-control", placeholder = "Customer PO NO", required = "Required" })
                                            @Html.ValidationMessageFor(model => model.CustomerPONo, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label>Order Date</label>
                                            <input name="OrderDate" type="text" value="@DateTime.Today.ToString("yyyy-MM-dd")" required="required" class="datepickerOrderDate form-control" id="txtOrderDate" placeholder="Date" autocomplete="off">
                                            @Html.ValidationMessageFor(model => model.OrderDate, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label>Payment Method</label>
                                            @Html.DropDownListFor(model => model.CustomerPaymentMethodEnumFK, Model.POPaymentMethodList as SelectList, "Payment Method", new { id = "ddlSupplierPaymentMethodEnumFK", @class = "form-control ddlReset", style = "width:100%", required = "required" })
                                            @Html.ValidationMessageFor(model => model.CustomerPaymentMethodEnumFK, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-5">
                                        <div class="form-group" style="padding:0px">
                                            <label for="message-text" class="col-form-label">Customer:</label>

                                            @Html.EditorFor(model => model.CommonCustomerName, new { htmlAttributes = new { @autocomplete = "on", @class = "form-control", @name = "Customer Name", @id = "txtCustomerName" } })

                                            @Html.HiddenFor(model => model.CustomerId, new { id = "ddlCustomerId" })
                                            @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                </div>


                                <div class="row">
                                    <div class="col-md-2">
                                        <div class="form-group" style="padding:0px">
                                            <label for="message-text" class="col-form-label">Warehouse:</label>
                                            @Html.DropDownListFor(model => model.StockInfoId, Model.StockInfoList as SelectList, "==Warehouse==", new { id = "ddStockInfoId", @class = "form-control searchingDropdown", style = "width:100%", required = "required" })
                                            @Html.ValidationMessageFor(model => model.StockInfoId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label>Exp. Delivery Date</label>
                                            <input name="ExpectedDeliveryDate" type="text" required="required" class="datepickerDeliveryDate form-control" id="txtDeliveryDate" placeholder="Expected Delivery Date" autocomplete="off">
                                            @Html.ValidationMessageFor(model => model.ExpectedDeliveryDate, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group" style="padding:0px">
                                            <label for="message-text" class="col-form-label">Final Destination:</label>
                                            @Html.TextAreaFor(model => model.FinalDestination, new { @class = "form-control", @id = "txtFinalDestination", rows = 1 })
                                            @Html.ValidationMessageFor(model => model.FinalDestination, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="txtDescription" class="col-form-label">Remarks:</label>
                                            @Html.TextAreaFor(model => model.Remarks, new { id = "txtDescription", placeholder = "Remarks", @class = "form-control", rows = 1 })

                                            @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                        </div>
                                    </div>



                                </div>
                                <div class="row">
                                    <div class="col-md-5">
                                        <div class="form-group" style="padding:0px">
                                            <label for="message-text" class="col-form-label">Sale Person:</label>

                                            @Html.EditorFor(model => model.OfficerNAme, new { htmlAttributes = new { @autocomplete = "on", @class = "form-control", @name = "Customer Name", @id = "txtSalePerson" } })

                                            @Html.HiddenFor(model => model.SalePersonId, new { id = "ddlSalePerson" })
                                            @Html.ValidationMessageFor(model => model.SalePersonId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                </div>
                            }
                            @if (Model.Status != (int)EnumPOStatus.Submitted)
                            {



                                <div class="row">
                                    <div class="col-md-4" style="padding:0px">
                                        <div class="form-group" style="padding:0px">
                                            <label for="message-text" class="col-form-label">Product Item:</label>

                                            @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @autocomplete = "on", @style = "width:100%;border:1px black solid", @class = "form-control", @name = "Product Name", @id = "txtProductName" } })

                                            @Html.HiddenFor(model => model.FProductId, new { id = "ddlRProductFK" })
                                            @Html.ValidationMessageFor(model => model.FProductId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-2" style="padding:0px">
                                        <div class="form-group">
                                            <label>Quantity</label>
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => model.Qty, new { id = "txtPurchaseQuantity", @onkeyup = "TotalAmountSumation()", @class = "form-control", @style = "width:100%;border:1px black solid", placeholder = "Purchase Quantity", required = "Required" })
                                                @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })

                                                <div class="input-group-addon">
                                                    <span class="txtUnitName"></span>
                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-2" style="padding:0px">
                                        <div class="form-group">
                                            <label>Unit Price</label>

                                            @Html.TextBoxFor(model => model.UnitPrice, new { id = "txtUnitPrice", type = "number", @onkeyup = "TotalAmountSumation()", @class = "form-control", @style = "width:100%;border:1px black solid;text-align:right;", placeholder = "Unit Price", required = "Required" })
                                            @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-4" style="padding:0px">
                                        <div class="form-group">
                                            <label style="text-align:right">VAT (%)</label>
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => model.VATPercent, new { id = "txtVATPercent", type = "number", @class = "form-control", @style = "width:100%;border:1px black solid;text-align:right;", placeholder = "VAT" })
                                                @Html.ValidationMessageFor(model => model.VATPercent, "", new { @class = "text-danger" })
                                                <div class="input-group-addon" style="border:1px black solid;">
                                                    <label>Is VAT Included</label>
                                                    @Html.CheckBoxFor(model => model.IsVATInclude, new { id = "checIsVATInclude" })
                                                </div>

                                            </div>

                                        </div>
                                    </div>

                                </div>
                                <div class="row">
                                    <div class="col-md-3" style="padding:0px 0px 8px 0px;">
                                        <div class="form-group">
                                            <label>Job Date</label>
                                            <input name="JobOrderDate" value="@DateTime.Today.ToString("yyyy-MM-dd")" type="text" style="width:100%;border:1px black solid;" class="datepickerJobOrderDate form-control" id="txtJobOrderDate" placeholder="Job Date" autocomplete="off">
                                            @*@Html.TextBoxFor(m => m.JobOrderDate, new
                                                {
                                                    @class = "datePicker form-control",
                                                    placeholder = "Job Date",
                                                    autocomplete = "off",
                                                    style = "width:100%;border:1px black solid;",
                                                    @id = "txtJobOrderDate"

                                                })*@
                                        </div>
                                    </div>
                                    <div class="col-md-3" style="padding:0px 0px 8px 0px;">
                                        <div class="form-group">
                                            <label>Reel Direction</label>
                                            @Html.TextBoxFor(model => model.ReelDirection, new { id = "txtReelDirection", @class = "form-control", @style = "width:100%;border:1px black solid;", placeholder = "Reel Direction" })
                                            @Html.ValidationMessageFor(model => model.ReelDirection, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3" style="padding:0px 0px 8px 0px;">
                                        <div class="form-group">
                                            <label>Pouch Direction</label>
                                            @Html.TextBoxFor(model => model.PouchDerection, new { id = "txtPouchDerection", @class = "form-control", @style = "width:100%;border:1px black solid;", placeholder = "Pouch Direction" })
                                            @Html.ValidationMessageFor(model => model.PouchDerection, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-3" style="padding:0px 0px 8px 0px;">
                                        <div class="form-group">
                                            <label>Total Amount</label>
                                            @Html.TextBoxFor(model => model.TotalAmount, new { id = "txtTotalAmount", type = "number", @readonly = "readonly", @class = "form-control", @style = "width:100%;border:1px black solid;text-align:right;", placeholder = "Total Price", required = "Required" })
                                            @Html.ValidationMessageFor(model => model.TotalAmount, "", new { @class = "text-danger" })
                                        </div>
                                    </div>




                                </div>

                                <div class="row">
                                    <div class="col-md-12" style="padding:0px 0px 8px 0px;">
                                        <div class="form-group">
                                            <label>Structure</label>
                                            @Html.TextAreaFor(model => model.Description, new { id = "txtStructure", placeholder = "Structure", @class = "form-control", rows = 1, @style = "width:100%;border:1px black solid;", })
                                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="box-footer">
                                    <div class="row">
                                        <div class="col-lg-4 col-md-4">
                                            <button type="submit" id="poCreateBtn" class="btn btn-primary btn-block">
                                                <i class='fa fa-plus'></i>
                                                @if (Model.OrderMasterId > 0)
                                                {
                                                    <span>Add Item</span> }
                                                else
                                                {
                                                    <span>Create New Order</span>}
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                            <!--Body Will by Start Here-->
                            @{ if (Model.OrderMasterId > 0)
                                {
                                    @Html.HiddenFor(model => model.ID, new { id = "hidSlaveID" })
                                    <div class="table-responsive col-md-12">
                                        <table id="KgErpDataTable" class="table table-striped table-hover">
                                            <thead>
                                                <tr>
                                                    <th style="padding:5px;text-align:center;">SL</th>
                                                    <th style="padding:5px;text-align:center;">Job No</th>
                                                    <th style="padding:5px;text-align:center;">Job Date</th>
                                                    <th style="padding:5px;text-align:left;">Product</th>
                                                    <th style="padding:5px;text-align:left;">Structure</th>
                                                    <th style="padding:5px;text-align:left;">Reed Direction</th>
                                                    <th style="padding:5px;text-align:left;">Pouch Direction</th>
                                                    <th style="padding:5px;text-align:center;">Quantity</th>
                                                    <th style="padding:5px;text-align:center;">Unit Price</th>

                                                    <th style="padding:5px;text-align:center;">VAT</th>
                                                    @*<th style="padding:5px;text-align:center;">TDS</th>*@
                                                    <th style="padding:5px;text-align:right;">Total Amount</th>
                                                    @if (Model.Status == (int)EnumPOStatus.Draft)
                                                    {
                                                        <th style="padding:5px;text-align:center;">Action</th>
                                                    }
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var item in Model.DataListSlave)
                                                {
                                                    //decimal unitDiscount = Convert.ToDecimal(item.Qty) * item.ProductDiscountUnit;

                                                    //decimal cashdiscount = item.ProductDiscountUnit > 0 ? ((Convert.ToDecimal((item.Qty * item.UnitPrice)) - (Convert.ToDecimal(item.Qty) * item.ProductDiscountUnit)) / 100 * item.CashDiscountPercent) : ((Convert.ToDecimal(item.Qty) * Convert.ToDecimal(item.UnitPrice)) / 100 * item.CashDiscountPercent);

                                                    //TotalUnitDiscount += unitDiscount;
                                                    //TotalCashDiscount += cashdiscount;
                                                    //TotalSpetialDiscount += item.SpecialDiscount;


                                                    TotalGrossAmount += (item.Qty * item.UnitPrice);
                                                    //TotalTDS += (item.Qty * item.UnitPrice) / 100 * Convert.ToDouble(item.TDSPercent);
                                                    TotalVAT += item.VATAmount;
                                                    // tds = ((item.Qty * item.UnitPrice) / 100) * Convert.ToDouble(item.TDSPercent);

                                                    //  TotalAmount += Convert.ToDecimal((item.Qty * item.UnitPrice) + (((item.Qty * item.UnitPrice) / 100) * Convert.ToDouble(item.VATPercent)) - (((item.Qty * item.UnitPrice) / 100) * Convert.ToDouble(item.TDSPercent))) - (unitDiscount + cashdiscount + item.SpecialDiscount);

                                                    <tr>
                                                        <td style="padding:5px">@(++sl)</td>
                                                        <td style="padding:5px;text-align:center;">@item.JobOrderNo</td>
                                                        <td style="padding:5px;text-align:center;">@item.JobOrderDate</td>
                                                        <td style="padding:5px;text-align:left;"><a target="_blank" href="~/Procurement/PackagingSalesOrderBOM?companyId=@Model.CompanyFK&orderDetailId=@item.OrderDetailId">@item.ProductName <span class="label label-warning">@(item.PromotionalOfferId != null? "Promotion Item":"")</span> </a></td>
                                                        <td style="padding:5px;text-align:center;">@item.Description</td>

                                                        <td style="padding:5px;text-align:center;">@item.ReelDirection</td>
                                                        <td style="padding:5px;text-align:center;">@item.PouchDerection</td>

                                                        <td style="padding:5px;text-align:center;">@String.Format("{0:0.00}", item.Qty) @item.UnitName</td>
                                                        <td style="padding:5px;text-align:center;">@String.Format("{0:0.00}", item.UnitPrice)</td>

                                                        <td style="padding:5px;text-align:center;">@String.Format("{0:0.00}", item.VATAmount) (@String.Format("{0:0.00}", item.VATPercent))</td>
                                                        @*<td style="padding:5px;text-align:center;">@String.Format("{0:0.00}", tds) (@String.Format("{0:0.00}", item.TDSPercent))</td>*@


                                                        <td style="padding:5px;text-align:right;">@String.Format("{0:0.00}", (item.Qty * item.UnitPrice))  </td>
                                                        @{ if (Model.Status == (int)EnumPOStatus.Draft)
                                                            {
                                                                <td style="padding:5px;text-align:center;">
                                                                    <a id="@item.ID" onclick=" makeEditble(@item.OrderDetailId);" class="linkPointer" title="Edit"><i class="fa fa-edit" aria-hidden="true"></i></a>

                                                                    <a id="@item.ID" onclick="makeDeletale(@item.OrderDetailId)" class="linkPointer" data-toggle="modal" data-target="#deleteProcurementPurchaseOrderSlaveModal" title="Delete" data-placement="top"><i class="glyphicon glyphicon-trash" aria-hidden="true"></i></a>
                                                                </td>
                                                            } }
                                                    </tr>
                                                }
                                            </tbody>

                                            <tfoot>

                                                <tr>

                                                    <td style="padding:5px"></td>

                                                    <th colspan="9" style="padding:5px;text-align:left;">Total Gross Amount</th>

                                                    <th style="padding: 5px; text-align: right;">@String.Format("{0:0.00}", TotalGrossAmount) </th>


                                                </tr>

                                                <tr>

                                                    <td style="padding:5px"></td>
                                                    <th colspan="9" style="padding:5px;text-align:left;">Total VAT</th>



                                                    <th style="padding: 5px; text-align: right;">@String.Format("{0:0.00}", TotalVAT)</th>
                                                </tr>


                                                <tr>

                                                    <td style="padding:5px"></td>
                                                    <th colspan="9" style="padding:5px;text-align:left;">Net Amount</th>
                                                    <th style="padding:5px;text-align:right;">@String.Format("{0:0.00}", TotalGrossAmount + TotalVAT)</th>
                                                </tr>





                                            </tfoot>
                                        </table>
                                    </div> } }
                        </div>
                        <div class="box-footer">
                            @if (Model.OrderMasterId > 0)
                            {
                                <div class="row">
                                    <div class="col-md-6">
                                        <a class="btn btn-warning" style="width:100%" target="_blank" href="~/Report/PackagingSalesInvoiceReport?companyId=@Model.CompanyFK&orderMasterId=@Model.OrderMasterId&reportName=PackagingSalesInvoiceReports"><i class="fa fa-print"></i> Sales Order Print</a>

                                    </div>
                                    @if (Model.Status == (int)EnumPOStatus.Submitted)
                                    {
                                        <div class="col-md-4 btn btn-success">  <i>Submitted Successfully</i></div>
                                        <div class="col-md-2">
                                            <a id="@Model.OrderMasterId" onclick="makeSubmitble(@Model.OrderMasterId)" class="linkPointer btn btn-warning" data-toggle="modal" style="width:100%" data-target="#submitProcurementPurchaseOrderModal" data-placement="top">

                                                <i>Undo Submit</i>

                                            </a>
                                        </div>



                                    }
                                    else
                                    {
                                        <div class="col-md-6">


                                            <a id="@Model.OrderMasterId" onclick="makeSubmitble(@Model.OrderMasterId)" class="linkPointer btn btn-success" data-toggle="modal" style="width:100%" data-target="#submitProcurementPurchaseOrderModal" data-placement="top">

                                                <i class="fa fa-save"></i><i>&nbsp;Submit</i>
                                            </a>
                                        </div>
                                    }






                                </div>


                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}


@using (Html.BeginForm("PAckegingSubmitOrderMastersFromSlave", "Procurement", FormMethod.Post, new { id = "submitOrderMastersFromSlaveFormId", @class = "formValidator" }))
{

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="submitProcurementPurchaseOrderModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b><span class="submitOrDraftText"></span> Sales Order</b></h5>
                </div>
                <div class="modal-body">
                    @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidsubmitOrderMasterId" })
                    @Html.HiddenFor(model => model.CompanyFK, new { id = "hidsubmitCompanyFK" })

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div style="text-align:center">
                        <h3>Are you sure to <span class="submitOrDraftText"></span> this Sales Order?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="Mobtnsave" style="width:100%" class="btn btn-primary fa fa-save">&nbsp;<span class="submitOrDraftText">Submit</span></button>
                    </div>
                </div>
            </div>
        </div>
    </div>}


@using (Html.BeginForm("PackagingOrderDetailDelete", "Procurement", FormMethod.Post, new { id = "deleteProcurementPurchaseOrderSlaveFormId", @class = "formValidator" }))
{
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="modal fade" id="deleteProcurementPurchaseOrderSlaveModal" data-toggle="modal" data-backdrop="static" data-keyboard="false" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">
                        &times;
                    </button>
                    <h5 class="modal-title"><b>Delete Sales Item</b></h5>
                </div>
                <div class="modal-body">
                    @Html.HiddenFor(model => model.OrderDetailId, new { id = "hidDeleteOrderDetailId" })
                    @Html.HiddenFor(model => model.OrderMasterId, new { id = "hidDeleteOrderMasterId" })

                    @Html.HiddenFor(model => model.CompanyFK, new { id = "deleteCompanyFK" })

                    @Html.HiddenFor(model => model.ActionId, new { id = "deleteActionId" })

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div style="text-align:center">
                        <h3>Are you sure to Delete this Sales Item?</h3>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-md-3">
                        <button type="button" onclick="resetProcurementPurchaseRequisitionSlaveForm()" class="btn btn-warning fa fa-close" data-dismiss="modal">&nbsp;NO</button>
                    </div>
                    <div class="col-md-9">
                        <button type="submit" id="btnsave" style="width:100%" class="btn btn-primary fa fa-remove">&nbsp; Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </div>}



@section scripts {
    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/cssjqryUi")
    <script type="text/javascript">




        function makeDeletale(rowId) {
            $('#hidDeleteOrderDetailId').val(rowId);
            $('#deleteActionId').val(3);
                                                    }
        function resetProcurementPurchaseRequisitionSlaveForm() {
            $('#procurementSalesOrderSlaveFormId')[0].reset();
            $('#ActionId').val(1);
        }

        $(document).ready(function () {
            $('.datepickerJobOrderDate').datepicker({
                dateFormat: "yy-mm-dd",
                changeMonth: true,
                changeYear: true,
                yearRange: "2001:+50",
                onSelect: function (dateText, inst) {
                    debugger
                    $('[name="JobOrderDate"]').val(dateText).change();
                    /*$('#txtJobOrderDate').val(dateText).change();*/
                }
            });

            $('.datepickerOrderDate').datepicker({
                dateFormat: "yy-mm-dd",
                changeMonth: true,
                changeYear: true,
                yearRange: "2001:+50",
                onSelect: function (dateText, inst) {
                    debugger
                    $('#txtOrderDate').val(dateText).change();
                }
            });
            $('.datepickerDeliveryDate').datepicker({
                dateFormat: "yy-mm-dd",
                changeMonth: true,
                changeYear: true,
                yearRange: "2001:+50",
                onSelect: function (dateText, inst) {
                    debugger
                    $('#txtDeliveryDate').val(dateText).change();
                }
            });

         $("#txtSalePerson").autocomplete({
         source: function (request, response) {


             $.ajax({
                   url: "@Url.Action("GetAutoCompleteSalesPerson", "Configuration")",

                 data: { prefix: request.term, companyId: "@Model.CompanyFK" },
                 dataType: "json",
                 type: "get",
                 cache: true,
                 contentType: "application/json; charset=utf-8",
                 success: function (data) {
                    response($.map(data, function (item) {
                        return item;
                    }))
                 },
                 error: function (response) {

                 },
                 failure: function (response) {

                 }
             });
         },

         select: function (e, i) {
             $("#ddlSalePerson").val(i.item.val);
             $("#hidCustomerTypeFk").val(i.item.CustomerTypeFK);


             },
         minLength: 1,
         cache: true

     }).focus(function () {
         $(this).autocomplete("search");
     });





              $("#txtProductName").autocomplete({
                source: function (request, response) {


                    $.ajax({
                       url:"@Url.Action("AutoCompleteFinishedGoodsGet", "Configuration")",

                        data: { companyId: "@Model.CompanyFK", prefix: request.term },
                        dataType: "json",
                        type: "get",
                        cache: true,
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {

                        },
                        failure: function (response) {

                        }
                    });
                },

            select: function (e, i) {

                    $("#ddlRProductFK").val(i.item.val);

                },
                minLength: 1,
                cache: true

            }).focus(function () {
                $(this).autocomplete("search");
            });



            $("#txtCustomerName").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url:"@Url.Action("GetAutoCompleteSCustomer", "Procurement")",

                        data: { prefix: request.term, companyId: "@Model.CompanyFK" },
                        dataType: "json",
                        type: "get",
                        cache: true,
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                           response($.map(data, function (item) {
                               return item;
                           }))
                        },
                        error: function (response) {

                        },
                        failure: function (response) {

                        }
                    });
                },

                select: function (e, i) {
                    $("#ddlCustomerId").val(i.item.val);
                    $("#hidCustomerTypeFk").val(i.item.CustomerTypeFK);
                    },
                minLength: 1,
                cache: true

            }).focus(function () {
                $(this).autocomplete("search");
            });

            $("#TermsAndConditionid").change(function () {
                var termsAndConditionid = $('#TermsAndConditionid').val();
                $.ajax({
                    type: "GET",
                    url: "@Url.Action("GetTermNCondition", "Procurement")",
                    datatype: "Json",
                    data: { id: termsAndConditionid },
                    success: function (data) {
                        $('#txtTermsAndCondition').empty();
                        $('#txtTermsAndCondition').append(data.description);

                    }
                });
            });
        });

        function makeEditble(rowId) {
            $.ajax({

                  type: "POST",
                  url: "@Url.Action("KPLSingleOrderDetails", "Procurement")",
                  datatype: "Json",
                  data: { id: rowId },
                  success: function (data) {

                      $('#poCreateBtn').html("<i class='fa fa-edit'></i>&nbsp;Update");
                      $("#hidOrderMasterId").val(data.OrderMasterId);
                      $('#ActionId').val(2);
                      $("#CompanyFK").val(data.CompanyFK);
                      $("#txtProductName").val(data.ProductCategoryName +" "+ data.ProductSubCategoryName + " "+ data.ProductName);
                      $("#ddlRProductFK").val(data.FProductId);

                      $("#txtPurchaseQuantity").val(data.Qty);
                      $('#txtUnitPrice').val(data.UnitPrice);
                      $("#hidOrderDetailId").val(data.OrderDetailId)
                      var sum = (data.Qty) * (data.UnitPrice);;
                      $("#txtTotalAmount").val(sum)
                      $('txtUnitName').text(data.UnitName);
                      $("#txtVATPercent").val(data.VATPercent);
                      $('#txtTDSPercent').val(data.TDSPercent);

                      $('#txtReelDirection').val(data.ReelDirection);
                      $('#txtPouchDerection').val(data.PouchDerection);
                      $('#txtStructure').val(data.Description);

                      var orderDate = DateCustom(data.JobOrderDate);


                      $('#txtJobOrderDate').val(orderDate).change();


                      if (data.IsVATInclude === true) {
                          $('#checIsVATInclude').prop('checked', true);
                      } else {
                          $('#checIsVATInclude').prop('checked', false);
                      }




                      window.scrollTo({ top: 0, behavior: 'smooth' });
                  }
                 });
            }

        function makeSubmitble(rowId) {
                $.ajax({
                        type: "POST",
                        url: "@Url.Action("GetSinglOrderMastersGet", "Procurement")",
                        datatype: "Json",
                        data: { orderMasterId: rowId },
                        success: function (data) {

                            $('#submitOrDraftPOCIDText').text(data.OrderNoMsg);
                            if (data.Status == 0) {
                                $('.submitOrDraftText').text("Make Submit");
                            }
                            else {
                                $('.submitOrDraftText').text("Make Draft");
                            }
                        }
                 });
                $('#hidsubmitProcurementPurchaseOrderId').val(rowId);
        }

        function TotalAmountSumation() {
            var purchaseQuantity = $("#txtPurchaseQuantity").val();
            var unitPrice = $("#txtUnitPrice").val();
            $("#txtTotalAmount").val(Number(purchaseQuantity) * Number(unitPrice));

        }

        function DateCustom(orderDate) {
            var dateString = orderDate.substr(6);
            var currentTime = new Date(parseInt(dateString));
            var month = currentTime.getMonth() + 1;
            if (month < 10) {
                month = "0" + month;
            }

            var day = currentTime.getDate();
            var year = currentTime.getFullYear();
            var date = year + "-" + month + "-" + day;
            return date;
        }

    </script>
}