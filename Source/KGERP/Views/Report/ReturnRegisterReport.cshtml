@model KGERP.Data.CustomModel.ReportCustomModel
@{
    ViewBag.Title = "ReturnRegisterReport";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="row">
    <div class="col-md-12" style="background-color:#f1f1f1;padding:5px">
        <span style="font-size:20px;color:#000000">Return Register Report</span>
    </div>
</div>
<br />
@using (Html.BeginForm("ReturnRegisterReport", "Report", FormMethod.Post, new { @id = "idForm" }))
{

    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.CompanyId, new { @id = "hfCompanyId" })
    // @Html.HiddenFor(model=>model.ProductType)

<div class="row">
    <div class="col-md-4">
        <div class="form-group">
            @Html.Label("From Date", htmlAttributes: new { @class = "control-label" })
            <br />
            <div style="display:flex">
                @Html.EditorFor(model => model.StrFromDate, new { htmlAttributes = new { @class = "datepicker form-control", @autocomplete = "off", style = "max-width:100%" } })
            </div>
            @Html.ValidationMessageFor(model => model.StrFromDate, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="col-md-4">
        <div class="form-group">
            @Html.Label("To Date", htmlAttributes: new { @class = "control-label" })
            <br />
            <div style="display:flex">
                @Html.EditorFor(model => model.StrToDate, new { htmlAttributes = new { @class = "datepicker form-control", @autocomplete = "off", style = "max-width:100%" } })
            </div>
            @Html.ValidationMessageFor(model => model.StrToDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="col-md-4">
        <div class="form-group">
            @Html.Label("Product Type", htmlAttributes: new { @class = "control-label" })
            <br />
            <select class="pull-left form-control" style="max-width:100%" name="ProductType" id="ProductType">
                <option value="F">Finishing</option>
                <option value="R">Raw </option>
            </select>
        </div>
    </div>
</div>


<div class="row">
    <div class="col-md-4">
        @Html.Label("Select Zone", htmlAttributes: new { @class = "control-label" })
        <br />
        @Html.DropDownListFor(model => model.ZoneId, new SelectList(Model.ZoneList, "Value", "Text"), "---Select---", new { id = "ddlZoneId", @class = "searchingDropdown form-control input-sm", @style = "max-width:100%" })
        @Html.ValidationMessageFor(model => model.ZoneId, "", new { @class = "text-danger" })
    </div>

    <div class="col-md-4">
        <div class="form-group">
            @Html.Label("Territory", htmlAttributes: new { @class = "control-label" })
            <br />

            @Html.DropDownListFor(model => model.SubZoneId, Model.SubZoneList as SelectList, "--Select Territory--", new { id = "ddlSubZoneId", @class = "form-control", @style = "max-width:100%" })
            @Html.ValidationMessageFor(model => model.SubZoneId, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="col-md-4">
        <div class="form-group" style="padding:0px">
            @Html.Label("Customer", htmlAttributes: new { @class = "control-label" })
            <br />
            @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @autocomplete = "on", @class = "form-control", @name = "Customer Name", @id = "txtCustomerName", @style = "max-width:100%" } })

            @Html.HiddenFor(model => model.VendorId, new { id = "ddlCommon_CustomerFK" })
            @Html.ValidationMessageFor(model => model.VendorId, "", new { @class = "text-danger" })
        </div>
    </div>

</div>

    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                @Html.Label("Category", htmlAttributes: new { @class = "control-label" })
                <br />
                @Html.DropDownListFor(model => model.ProductCategoryId, new SelectList(Model.ProductCategoryList, "Value", "Text"), "---Select Category---", new { id = "ddlCommon_ProductCategoryFk", @class = "searchingDropdown form-control", @style = "max-width:100%" })
                @Html.ValidationMessageFor(model => model.ProductCategoryId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                @Html.Label("Sub-Category", htmlAttributes: new { @class = "control-label" })
                <br />
                @Html.DropDownListFor(model => model.ProductSubCategoryId, Model.ProductSubCategoryList as SelectList, "---Select Subcategory---", new { id = "ddlCommonProductSubCategoryFk", @class = "searchingDropdown form-control", @style = "max-width:100%" })
                @Html.ValidationMessageFor(model => model.ProductSubCategoryId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                @Html.Label("Item", htmlAttributes: new { @class = "control-label" })
                <br />
                @Html.DropDownListFor(model => model.ProductId, Model.ProductList as SelectList, "---Select Item---", new { id = "ddlCommonProductFk", @class = "searchingDropdown form-control", @style = "max-width:100%" })
                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>


    <div class="row">
        <div class="col-md-4"></div>
        <div class="col-md-4">
            <div class="form-group pull-left">
                <br />

                <select class="pull-left" style="color:#ffffff; background-color:#dd4b39;height:34px;font-size:15px" name="ReportType" id="ReportType">
                    <option value="PDF">PDF</option>
                    <option value="EXCEL">EXCEL</option>
                    <option value="WORD">WORD</option>
                </select>
                <input type="submit" name="EXPORT" value="EXPORT" class="btn btn-success pull-left" formtarget="_blank" />

            </div>
        </div>
        <div class="col-md-4"></div>
    </div>

        }

        @section Scripts {
            @Scripts.Render("~/bundles/jqueryui")
            @Styles.Render("~/Content/cssjqryUi")

            <script>
        $(document).ready(function () {
            $('.datepicker').datepicker({
                dateFormat: "mm/dd/yy",
                showOn: 'both',
                buttonText: "<i class='fa fa-calendar'></i>",
                changeMonth: true,
                changeYear: true,
                yearRange: "2001:+50"
            });
        });

      $("#ddlZoneId").change(function (e) {
          var zoneId = $("#ddlZoneId :selected").val();

                $.ajax({
                type: "GET",
                url: "@Url.Action("CommonSubZonesGet", "Configuration")",
                datatype: "Json",
                    data: { id: zoneId },
                    success: function (data) {
                        console.log("data list",data);
                    var items = "";
                        if (data) {
                            $("#ddlSubZoneId").empty();
                            $("#ddlSubZoneId").append("<option value=''>==Select Territory==</option>");
                            $(data).each(function (index, item) {
                                $("#ddlSubZoneId").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                            });

                        }
                    }
                });
       });





        $(document).ready(function () {

             //$('.formValidator').bootstrapValidator();

             $("#ddlCommon_ProductCategoryFk").change(function () {

                var productCategoryFk = $("#ddlCommon_ProductCategoryFk").val();
                     $.ajax({
                type: "GET",
                url: "@Url.Action("GetCommonProductSubCategory", "WareHouse")",
                datatype: "Json",
                         data: { id: productCategoryFk},
                    success: function (data) {
                    var items = "";
                        if (data) {
                            $("#ddlCommonProductSubCategoryFk").empty();
                            $("#ddlCommonProductSubCategoryFk").append("<option value=''>==Select Subcategory==</option>");
                            $(data).each(function (index, item) {
                                $("#ddlCommonProductSubCategoryFk").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                            });

                        }
                    }
                });
            })


            $("#ddlCommonProductSubCategoryFk").change(function () {

                var productSubCategoryFk = $("#ddlCommonProductSubCategoryFk").val();
                     $.ajax({
                type: "GET",
                url: "@Url.Action("GetCommonProduct", "WareHouse")",
                datatype: "Json",
                         data: {  id : productSubCategoryFk},
                    success: function (data) {
                    var items = "";
                        if (data) {
                            $("#ddlCommonProductFk").empty();
                            $("#ddlCommonProductFk").append("<option value=''>==Select Item==</option>");
                            $(data).each(function (index, item) {
                                $("#ddlCommonProductFk").append("<option value='" + item.Value + "'>" + item.Text + "</option>");
                            });

                        }
                    }
                });
            })


$("#txtCustomerName").autocomplete({
                source: function (request, response) {
                    //console.log(request);
                    //console.log(response);

                    $.ajax({
                        url:"@Url.Action("GetAutoCompleteSCustomer", "Procurement")",// '/AccountHeads/AutoComplete/',
                        //data: "{ 'prefix': '" + request.term + "'}",
                        data: { prefix: request.term, companyId: "@Model.CompanyId" },
                        dataType: "json",
                        type: "get",
                        cache: true,
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                           response($.map(data, function (item) {
                               return item;
                           }))
                        },
                        error: function (response) {
                                                                        //alert(response.responseText);
                        },
                        failure: function (response) {
                                                                        //alert(response.responseText);
                        }
                    });
                },

                select: function (e, i) {
                    $("#ddlCommon_CustomerFK").val(i.item.val);

                    },
                minLength: 1,
                cache: true

            }).focus(function () {
                $(this).autocomplete("search");
            });



        });


        function resetForm() {
            $('#salesReportformId')[0].reset();
        }


            </script>
        }
